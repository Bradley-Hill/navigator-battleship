{"version":3,"sources":["ship.ts","gameboard.ts","player.ts","gameLoop.ts","script.ts"],"names":[],"mappings":";;;;;AIAA,IAAA,UAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;ADAA,ADAA,AEGA,AJMA,IGTA,ADAA,IEGQ,CAAC,AJMO,MGThB,ADAA,GCAA,ADAA,CFS0B,CAAC,IAAY,CGTvC,ADAA,AEGyB,CDHzB,ADAA,AEG0B,AJMa,kBGTvC,ADAA,AEG4C,CDH5C,ADAA,CEG8C,YAAA;ADF9C,ADWA,EERE,AJMA,EGTF,ECGQ,GFQQ,AFFP,GGTT,GAAA,GCGoB,GFQQ,AERL,CDHvB,ADW6B,CCX7B,MDW6C,AERd,CAAC,CFQa,OCX7C,CAAA,ICG6C,CAAC,WAAW,CAAC;ADU1D,EDDE,AERA,EJME,EINI,GDSQ,ADDP,CFFC,EAAE,IAAI,GINK,GAAG,CDSM,CAAA,EAAA,ICTE,CAAC,aAAa,CAAC,gBAAgB,CAAC;EDU9D,ACTA,EFQE,AFFA,EGGE,ACTE,KFQG,AFFA,EEEE,AFFA,CGGC,AHHA,GGGa,CCTP,EFQA,CERG,QAAQ,CAAC,aAAa,CAAC,eAAe,CAAC;EAE5D,EDQE,ADDA,AFFA,EILI,EJKA,EAAE,GEEG,CEPG,CDQD,ADDA,AFFA,CEEA,CCCE,ADDF,AEPI,CAAA,CFOJ,AEPI,EAAA,CDQG,QDDP,CAAA,AEPI,CAAA,cFOW,AEPG,EFOF,AEPE,CAAE,CFOF,CAAC;EELhC,EDOE,ADDA,AFFA,EIJE,EFME,EAAE,EFFE,EAAE,GGGG,ADDA,CFFC,CGGC,ACPA,CFMC,QCCD,EDDW,CENC,EFME,SCCd,ACPuB,CFMC,CCCxB,ACPyB;IFOxC,AENA,AJIA,EGGE,CHHC,EAAA,GEEK,CCCC,CDDC,AENA,CAAC,EDOE,CAAC,AHHX,GEEc,CFFd,CIJgB,CAAC,AJIjB,KGGsB,MCPM,CAAC,SAAS,EAAE,aAAa,EAAE,eAAe,CAAC;EAC5E,CAAC,CDOC,ADDA,CCCC,CHHC,GIJG,CJIC,CAAC,MEEM,CFFC,CEEC,CFFC,QEED,cAAU,CAAa,EAAE,CAAa,EAAE,QAAgB,EAAA;ICEvE,ACPA,AJIA,CAAC,CECwB,IAAA,CAAA,AELlB,CAAC,GDOG,CDFc,CCEZ,ACPA,CDOA,ACPC,CDOD,EAAA,ADFY,CAAA,EAAA,KCEZ,CAAA,YAAY,EAAC,ACPc,CAAC,GDOX,CAAC;ECNjC,EDOE,AHHA,IEAyB,CAAA,CFAnB,EEAmB,AFAnB,CEAgC,CCG5B,EAAE,CAAA,CAAA,EAAA,CHHN,OGGM,AHHN,CGGM,CHHN,WGGkB,EAAC,KAAK,CAAC;ECNjC,EDOE,EDJsC,AEHpC,AJIA,IAAI,GGGG,CHHC,CGGC,AHHA,GIJG,IJII,EGGP,EHHW,IIJI,AJIA,CAAC,GGGhB,EAAA,CHHsB,EAAE,EIJE,EAAE;IACvC,EDOE,ADLsC,EFEpC,EGGE,ADLkC,CCKjC,ADLiC,CFEhC,CAAC,CIJC,CAAC,CFE6B,CFE3B,GAAG,CEFwB,CCKtB,ADLsB,CEFrB,CFEqB,AEFpB,AJIA,CGGC,IAAI,MCPM,CAAC,SAAS,EAAE,YAAY,EAAE,cAAc,CAAC;EAC1E,CAAC,GDOG,AHHA,EEHsC,CAAA,AEDnC,CDOC,CAAC,CDNiC,CAAa,SCMnC,CAAC,SAAS,GAAG,CAAA,CAAA,EAAA,WAAA,CAAA,eAAe,EAAC,EAAE,CAAC;ICNlD,AJIA,EGGE,ADPmD,ICO/C,CAAC,ACPA,CAAC,KAAK,CAAC,IDOI,CAAC,SAAS,CAAC,UCPU,CAAC,GDOG,CAAA,CAAE;ECN/C,CJIC,GGIG,ADRA,ICQI,CAAC,EDRE,CAAC,GAAG,CAAC,CAAC,CAAC,CCQC,CAAC,SAAS,GAAG,CAAA,CAAA,EAAA,WAAA,CAAA,eAAe,EAAC,EAAE,CAAC;AHHrD,EIHE,IDOI,ADRA,AECA,IDOI,CAAC,EDRE,CAAC,GAAG,CAAC,AECA,CFDC,CAAC,AECA,CDOC,CAAC,SAAS,CAAC,cAAc,CAAA,CAAE;AHnBhD,IIaI,EDOE,ADRA,CFZN,CAAA,EGoBU,CAAC,GDRG,CAAC,CECC,CAAC,CJbjB,GAAA,CGoBsB,CAAA,CAAE,ADRA,CAAC,MFZzB,EIaiC,CAAC,IFDI,CAAC,CAAC,CECC,CFDC,CAAC,AECA,CFDC,WECD;IDQvC,ADRA,CCQC,ADRA,CECC,QAAQ,CAAC,SAAS,CAAA,CAAE;IDQtB,ADPA,EEAE,IAAI,KDOK,EAAE,GDPG,EAAE,AEAA,IDOL,KDPK,GEAY,IDOP,CAAU,EAAE,CAAU,EAAA,CCPJ,EAAE,CFAf,QAAgB,EAAA;MCQ1C,ADPA,EEAE,EDOE,ADPA,CAAC,GCOG,CAAC,ADPA,CAAC,EEAE,CACR,IDMa,ADPA,ECOE,ADPA,EECP,CAAC,WAAW,CAAC,SAAS,EAC9B,YAAY,EACZ,cAAc,CACf;MACH,EDGE,ADPA,IAAI,SAAS,GAAG,KAAK;MCQvB,ACHA,EFJE,IAAI,EEIE,CFJD,AEIE,GFJS,CAAC,OEIC,CAAA,CAAE;IACxB,CAAC,CDGC,ACHA,EFJE,ECOE,EDPE,ECOE,CAAC,ADPF,GAAW,CAAC,OCOC,CAAC,QAAQ,EAAE;ECFnC,CAAC,KDGK,ADPA,CEIC,MDGM,ADPA,CCOC,ADPA,GCOG,CAAC,KDPK,EAAE,aCOa,CAAC;ICFrC,IDGI,EDPE,CEIC,CDGC,ACHA,CDGC,ADPF,GAAG,CEIG,CDGC,ACHA,EFJA,CAAC,KAAK,CCOG,ADPF,ICOM,ADPF,CCOG,ADPF,KCOO,CDPD,CAAA,CAAE,GAAG,GCOK,CCHC,CDGC,ACHA,GFJC,CAAC,SAAS,CAAC,IAAI,CAAC;EEK/D,QDGQ,ADPA,GAAC,CCOG,CAAC,CDPD,IAAI,CAAC,KCOO,ADPF,CCOG,ADPF,IAAI,CAAC,MAAM,CAAA,CCOI,ADPF,CCOG,CAAC,CDPD,CCOG,CAAC,EAAE,IAAI,ADPF,CCOG,ADPF,SAAS,CCOG,ADPF,CCOG,GDPC,CAAC;EEM/D,QDEQ,ADNA,CEIC,GDEG,ADNE,CCMD,MCFM,CACjB,GFLuB,GAAG,CCMD,CAAA,CAAE,ACDP,EACpB,GFNkC,CAAC,IEMd,EACrB,GFP4C,CAAC,MEO3B,EAAA,MFPyC,CAAA,CAAE;IES7D,MDFM,ADNA,EEQE,CAAC,CDFC,ADNE,CCMD,IAAI,CAAC,EDNI,AEQF,GFRK,AEQF,EAAE,CDFC,EAAE,GDNK,CAAC,SAAS,CAAC,WAAW,CAAA,CAAE;IESvD,MFRM,ECME,ACEA,CAAC,CFPD,CAAC,CCKG,CAAC,CCEC,CAAC,OFPK,CAAC,CCKG,CAAC,EDLA,CAAC,MEOQ,CDFC,CAAA,CAAE,ACEA,CFPV,IAAI,EAAA,EEOM,CAAA,MAAA,CAAU,SAAS,CAAC,IAAI,EAAA,QAAA,CAAQ;IACrE,QDFQ,ADN4B,AEQ5B,CAAC,GDFG,CAAC,CCEC,CFRsB,AEQrB,IFRyB,CAAC,CAAC,CAAC,CCMpB,CAAC,GDNwB,GAAC,CEQlB,GDFG,ADNmB,AEQnB,CDFA,CAAE,EDNqB,CAAC,CAAC,CAAC,EEQ1B,CAAA,CFR8B,GAAC,EEQ/B,CAAU,SAAS,CAAC,IAAI,EAAA,QAAA,CAAQ;IAClE,IAAM,EFT8B,CAA6B,CCQzD,ADR0D,AESxD,GAAG,CDDD,ADPJ,CAAC,GCOO,CAAC,ECCI,CAAC,CFRL,CAAC,IAAI,CCOK,ADPJ,CCOK,OCCS,CDDD,CDPZ,CCOc,GDPV,EAAA;IES5B,IAAI,CAAC,GFT4B,ECQvB,ACCA,CAAC,GDDG,CAAC,ADRkB,IAAI,CAAC,CAAC,CAAC,AESlB,CAAC,EDDE,CAAC,CDRmB,GAAC,AEShB,EAAE,EFTkB,IAAI,CAAC,CAAC,CAAC,AEShB,CDDC,ACCA,CDDC,GDRmB,AEShB,CDDC,ACCA,CDDC,CDRe,MESR,CAAA,CAAE,CAAC,CDDC,CAAC;ICE5D,KAAK,CFV4B,CAA8B,CAAC,CEUvD,CDDC,ADRF,AESE,GAAG,CDDC,ACCA,CDDC,CCCC,CAAC,GAAG,SDDS,ACCA,CDDA,ACCC,CDDC,GCCG,EAAE,CAAC,EAAE,EAAE;MACvC,KAAK,CFTC,ECQE,CCCC,CAAC,EDDE,CAAC,ACCA,CAAC,CFTC,CESC,CDDC,ACCA,CDDC,ADRA,EESE,EFTE,ICQI,EAAE,CCCC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;QACvC,EFTE,EESI,IDDE,ACCE,GAAG,CDDD,CAAC,MCCQ,CAAC,IDDE,CAAC,QCCU,CAAC,CDDD,CAAA,CAAE,ECCI,CAAC;QFR1C,AESA,IAAI,CAAC,GDDG,IAAI,CAAC,CCCC,CAAC,GAAG,CAAC,IDDI,CAAC,CCCC,CAAC,QDDQ,CAAA,CAAE;QDPpC,AESA,IAAI,CAAC,CDDC,EDRE,CAAC,GESG,CAAC,CAAC,GAAG,CFTC,AESA,CFTC,AESA,QAAQ,CAAA,CAAE,GFTG,CAAC,GAAC,EAAE,GAAC,CAAC;MACxC,EESE,IDDI,ACCA,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAA,CAAE;AHpDrC,IAAA,EC4CM,EESE,EDDE,AFpDV,EGqDY,CHrDZ,AC4Ca,CAAC,GAAG,CAAC,ED5ClB,CAAA,CGqDsB,KAAK,OHrD3B,CAAA,KC4CwC,CAAC,CESC,EAAE;AH5B5C,ICoBI,CAAC,GCQG,CF5BQ,CG6BN,IAAI,CAAC,SH7BgB,CAAC,IAAY,EAAA,AG6Bb,CAAC,OAAO,EAAE,UAAC,KAAK,EAAA;EH5B7C,ECoBE,ECQE,AF5BA,MG6BM,EFTE,CDpBC,CCoBC,AESA,CAAC,CH7BY,OCoBb,AESS,CAAC,UFTV,EAAA,CESuB,CAAA,CAAE,EAAE;IDAvC,AF5BA,CE4BC,CDRC,EDpBE,EAAE,ACoBA,CAAC,GDpBG,AG6BA,KFTK,AESA,CAAC,EFTE,CAAC,IAAI,CAAC,QAAQ,0CES0C,CAAC;IDA3E,AF5BA,ACoBA,IDpBI,EAAE,IG6BI,CH7BC,CAAC,EE4BE,CCCC,CDDC,AF5BA,AG6BA,CH7BC,QE4BD,KCCc,CAAA,CAAE,QDDhB,EAAA;GDPjB,GCQG,AF7BiB,IE6Bb,EF7BmB,AG8BjB,CAAC,CDDC,AF7BiB,CE6BhB,ICCI,MDDM,CAAC,SAAS,CAAC,YAAY,CAAA,CAAE,EAAE;ADPpD,IDtBmC,CAAE,EAAE,CE8B/B,MCCM,CDDC,CAAC,ECCI,CDDD,AF9BoB,CE8BnB,ICCM,GAAG,KAAK,CAAC,MAAqB,aDDJ,CAAC;AD9CrD,MDiBM,CCjBN,CC+CQ,AD/CR,IC+CY,CAAC,AF9BP,CG+BQ,IH/BH,AG+BO,CH/BN,CCjBZ,CC+CqB,EF9BL,ACjBhB,CC+CwB,AF9BP,AG+BO,CAAC,GDDG,ICCI,CAAC,CAAC,CFhDlC,GEgDsC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE;MDAlD,CAAC,CF/BY,KE+BN,CF/BY,EAAE,AGgCX,CDDC,GCCK,CDDD,ACCE,CDDD,ECCI,QAAQ,CDDD,ACCE,CDDD,KCCO,CAAC,GDDC,CAAC,GCCK,CAAC,CAAC,EAAE,EAAE,CAAC,EDDA,CAAA,CAAE,EAAE;MF/B7B,CAAE,CEgCzB,CFh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","file":"script.221c08a2.js","sourceRoot":"../src","sourcesContent":["export interface Ship {\n  length: number;\n  impacts: number;\n  sunk: boolean;\n  position: [number, number][] | null;\n  hit(): void;\n  isSunk(): void;\n}\n\nexport function createShip(size: number): Ship {\n  return {\n    length: size,\n    impacts: 0,\n    sunk: false,\n    position: null,\n    hit() {\n      this.impacts++;\n    },\n    isSunk() {\n      if (this.impacts >= this.length) {\n        this.sunk = true;\n      }\n    },\n  };\n}\n","import { createShip, Ship } from \"../src/ship\";\n\nexport type Cell = {\n  occupied: boolean;\n  hit: boolean;\n  ship: Ship | null;\n};\n\nexport interface Gameboard {\n  size: number;\n  grid: Cell[][];\n  createShips(\n    gameboardX: number,\n    gameboardY: number,\n    shipSize: number,\n    orientation: \"horizontal\" | \"vertical\"\n  ): Ship | null;\n  createAllShips(): void;\n  receiveAttack(gameboardX: number, gameboardY: number): void;\n  missedAttacks: [number, number][];\n  allShipsSunk(): boolean;\n  getMissedShots: () => number[][];\n  getHitCells: () => number[][];\n}\n\nexport function createGameboard(size: number): Gameboard {\n  let gameboard: Gameboard = {\n    size: size,\n    grid: Array.from({ length: size }, () =>\n      Array.from({ length: size }, () => ({\n        occupied: false,\n        hit: false,\n        ship: null,\n      }))\n    ),\n    createShips(\n      gameboardX: number,\n      gameboardY: number,\n      shipSize: number,\n      orientation: \"horizontal\" | \"vertical\"\n    ): Ship | null {\n      let ship = createShip(shipSize);\n      ship.position = [];\n\n      for (let i = 0; i < shipSize; i++) {\n        let x = gameboardX + (orientation === \"horizontal\" ? i : 0);\n        let y = gameboardY + (orientation === \"vertical\" ? i : 0);\n\n        if (x >= size || y >= size || gameboard.grid[x][y].occupied) {\n          return null;\n        }\n        ship.position.push([x, y]);\n      }\n\n      for (let [x, y] of ship.position) {\n        gameboard.grid[x][y].ship = ship;\n        gameboard.grid[x][y].occupied = true;\n      }\n\n      return ship;\n    },\n    createAllShips(): void {\n      const shipSizesArr = [6, 5, 4, 3, 2];\n\n      for (let size of shipSizesArr) {\n        let ship: Ship | null = null;\n        while (ship === null) {\n          const orientation = Math.random() < 0.5 ? \"horizontal\" : \"vertical\";\n          const gameboardX = Math.floor(Math.random() * this.size);\n          const gameboardY = Math.floor(Math.random() * this.size);\n\n          ship = this.createShips(gameboardX, gameboardY, size, orientation);\n        }\n      }\n    },\n    receiveAttack(gameboardX: number, gameboardY: number): void {\n      if (gameboard.grid[gameboardX][gameboardY].occupied) {\n        gameboard.grid[gameboardX][gameboardY].hit = true;\n        gameboard.grid[gameboardX][gameboardY].ship?.hit();\n      } else {\n        gameboard.missedAttacks.push([gameboardX, gameboardY]);\n      }\n    },\n    missedAttacks: [],\n    allShipsSunk() {\n      for (let i = 0; i < this.grid.length; i++) {\n        for (let j = 0; j < this.grid.length; j++) {\n          if (this.grid[i][j].occupied) {\n            this.grid[i][j].ship?.isSunk();\n            if (!this.grid[i][j].ship?.sunk) {\n              return false;\n            } else {\n              continue;\n            }\n          }\n        }\n      }\n      return true;\n    },\n    getMissedShots: function () {\n      return this.missedAttacks;\n    },\n    getHitCells: function () {\n      const hitCells: number[][] = [];\n      for (let i = 0; i < this.size; i++) {\n        for (let j = 0; j < this.size; j++) {\n          if (this.grid[i][j].hit) {\n            hitCells.push([i, j]);\n          }\n        }\n      }\n      return hitCells;\n    },\n  };\n  return gameboard;\n}\n","import { createGameboard, Gameboard } from \"../src/gameboard\";\n\nexport interface Player {\n  isHuman: boolean;\n  gameboard: Gameboard;\n  name: \"Player 1\" | \"Player 2\";\n  isMyTurn: boolean;\n  makeHumanMove: (x: number, y: number, opponent: Player) => void;\n  makeComputerMove: (opponent: Player) => void;\n  toggleTurn: () => void;\n}\n\nexport function createPlayer(isHuman: boolean): Player {\n  return {\n    isHuman: isHuman,\n    gameboard: createGameboard(10),\n    name: isHuman ? \"Player 1\" : \"Player 2\",\n    isMyTurn: isHuman,\n    makeHumanMove: function (x: number = 0, y: number = 0, opponent: Player) {\n      console.log(x);\n      console.log(y);\n      opponent.gameboard.receiveAttack(x, y);\n    },\n\n    makeComputerMove: function (opponent: Player) {\n      if (!this.isHuman) {\n        let validMove = false;\n        let x: number = 0;\n        let y: number = 0;\n        while (!validMove) {\n          x = Math.floor(Math.random() * opponent.gameboard.size);\n          y = Math.floor(Math.random() * opponent.gameboard.size);\n\n          const missedShots = opponent.gameboard.getMissedShots();\n          const hitCells = opponent.gameboard.getHitCells();\n          if (\n            !missedShots.some((shot) => shot[0] === x && shot[1] == y) &&\n            !hitCells.some((cell) => cell[0] === x && cell[1] === y)\n          ) {\n            validMove = true;\n          }\n        }\n        opponent.gameboard.receiveAttack(x, y);\n      }\n      console.log(\"Computer made a move\");\n    },\n    toggleTurn: function () {\n      this.isMyTurn = !this.isMyTurn;\n    },\n  };\n}\n","import { createGameboard } from \"../src/gameboard\";\nimport { createPlayer, Player } from \"../src/player\";\n\nexport interface Gameloop {\n  gameStarted: boolean;\n  isGameStarted: () => boolean;\n  startGame: () => void;\n  humanPlayer: Player;\n  compPlayer: Player;\n  manageTurns: (x?: number, y?: number) => void;\n  checkEndOfGame: () => void;\n  gameOver: boolean;\n}\n\nexport function createGameLoop(): Gameloop {\n  let gameLoop: Gameloop = {\n    gameStarted: false,\n    isGameStarted: function () {\n      return this.gameStarted;\n    },\n    humanPlayer: createPlayer(true),\n    compPlayer: createPlayer(false),\n    startGame: function () {\n      this.gameStarted = true;\n      this.humanPlayer.gameboard = createGameboard(10);\n      this.humanPlayer.gameboard.createAllShips();\n\n      this.compPlayer.gameboard = createGameboard(10);\n      this.compPlayer.gameboard.createAllShips();\n      this.manageTurns();\n    },\n    manageTurns: function (x?: number, y?: number) {\n      if (this.gameOver) {\n        return;\n      }\n      if (this.humanPlayer.isMyTurn) {\n        console.log(\"Human players Turn\");\n        if (x !== undefined && y !== undefined) {\n          this.humanPlayer.makeHumanMove(x, y, this.compPlayer);\n          this.checkEndOfGame();\n          if (!this.gameOver) {\n            this.humanPlayer.toggleTurn();\n            this.compPlayer.toggleTurn();\n\n            if (this.compPlayer.isMyTurn) {\n              this.compPlayer.makeComputerMove(this.humanPlayer);\n              this.checkEndOfGame();\n              if (!this.gameOver) {\n                this.humanPlayer.toggleTurn();\n                this.compPlayer.toggleTurn();\n              }\n            }\n          }\n        }\n      }\n    },\n    checkEndOfGame: function () {\n      if (this.compPlayer.gameboard.allShipsSunk()) {\n        console.log(\"Congratulations! You have won!\");\n        this.gameOver = true;\n      } else if (this.humanPlayer.gameboard.allShipsSunk()) {\n        console.log(\"Game Over, you lost...\");\n        this.gameOver = true;\n      }\n    },\n    gameOver: false,\n  };\n  return gameLoop;\n}\n","import { createGameLoop } from \"../src/gameLoop\";\nimport { Gameboard } from \"./gameboard\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const startGameBtn = document.querySelector(\"#startBtn\");\n  const opponentBoard = document.querySelector(\".opponentBoard\");\n  const playersBoard = document.querySelector(\".playersBoard\");\n\n  const gameLoop = createGameLoop();\n\n  if (opponentBoard instanceof HTMLElement) {\n    createGrid(gameLoop.humanPlayer.gameboard, opponentBoard, \"opponentBoard\");\n  } else {\n    console.error(\"Opponent board not found\");\n  }\n  if (playersBoard instanceof HTMLElement) {\n    createGrid(gameLoop.humanPlayer.gameboard, playersBoard, \"playersBoard\");\n  } else {\n    console.error(\"Players board not found\");\n  }\n\n  if (startGameBtn) {\n    startGameBtn.addEventListener(\"click\", () => {\n      gameLoop.startGame();\n      if (playersBoard instanceof HTMLElement) {\n        createGrid(\n          gameLoop.humanPlayer.gameboard,\n          playersBoard,\n          \"playersBoard\"\n        );\n      }\n      gameLoop.manageTurns();\n    });\n  } else {\n    console.error(\"Start Game button not found\");\n  }\n\n  function createGrid(\n    gameboard: Gameboard,\n    htmlGrid: HTMLElement,\n    boardClass: string\n  ) {\n    htmlGrid.innerHTML = \"\";\n    htmlGrid.style.gridTemplateColumns = `repeat(${gameboard.size}, 1fr)`;\n    htmlGrid.style.gridTemplateRows = `repeat(${gameboard.size}, 1fr)`;\n    const root = document.documentElement;\n    root.style.setProperty(\"--num\", gameboard.size.toString());\n    for (let i = 0; i < gameboard.size; i++) {\n      for (let j = 0; j < gameboard.size; j++) {\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"cell\");\n        cell.dataset.x = i.toString();\n        cell.dataset.y = j.toString();\n        if (boardClass === \"opponentBoard\") {\n          cell.addEventListener(\"click\", (event) => {\n            if (!gameLoop.isGameStarted()) {\n              alert(\"Please click the Start Game button before making a move.\");\n              event.preventDefault();\n            } else {\n              const target = event.target as HTMLElement;\n              if (target.dataset.x && target.dataset.y) {\n                const x = parseInt(target.dataset.x, 10);\n                const y = parseInt(target.dataset.y, 10);\n                gameLoop.manageTurns(x, y);\n                updateMoveLists();\n              } else {\n                console.error(\"Data attributes x and y are not set\");\n              }\n            }\n          });\n        }\n        htmlGrid.appendChild(cell);\n      }\n    }\n    if (boardClass === \"playersBoard\") {\n      updateShipCells(\"playersBoard\", gameLoop.humanPlayer.gameboard);\n    }\n  }\n\n  function updateElementTextContent(elementId: string, moves: number[][]) {\n    const element = document.getElementById(elementId);\n    if (element) {\n      element.textContent = moves\n        .map((move) => `(${move[0]}, ${move[1]})`)\n        .join(\", \");\n    }\n  }\n\n  function updateShipCells(boardClass: string, gameboard: Gameboard) {\n    for (let x = 0; x < gameboard.size; x++) {\n      for (let y = 0; y < gameboard.size; y++) {\n        if (gameboard.grid[x][y].ship !== null) {\n          const cell = document.querySelector(\n            `.${boardClass} .cell[data-x=\"${x}\"][data-y=\"${y}\"]`\n          );\n          if (cell) {\n            cell.classList.add(\"ship\");\n          }\n        }\n      }\n    }\n  }\n\n  function updateCellClasses(\n    boardClass: string,\n    moves: number[][],\n    className: string\n  ) {\n    moves.forEach((move) => {\n      const cell = document.querySelector(\n        `.${boardClass} .cell[data-x='${move[0]}'][data-y='${move[1]}']`\n      );\n      if (cell) {\n        cell.classList.add(className);\n      }\n    });\n  }\n\n  function updateMoveLists() {\n    updateElementTextContent(\n      \"humanMissedAttacks\",\n      gameLoop.humanPlayer.gameboard.missedAttacks\n    );\n    updateElementTextContent(\n      \"computerMissedAttacks\",\n      gameLoop.compPlayer.gameboard.missedAttacks\n    );\n    updateElementTextContent(\n      \"humanHitCells\",\n      gameLoop.humanPlayer.gameboard.getHitCells()\n    );\n    updateElementTextContent(\n      \"computerHitCells\",\n      gameLoop.compPlayer.gameboard.getHitCells()\n    );\n\n    updateCellClasses(\n      \"opponentBoard\",\n      gameLoop.compPlayer.gameboard.missedAttacks,\n      \"missedAttacks\"\n    );\n    updateCellClasses(\n      \"playersBoard\",\n      gameLoop.humanPlayer.gameboard.missedAttacks,\n      \"missedAttacks\"\n    );\n    updateCellClasses(\n      \"opponentBoard\",\n      gameLoop.compPlayer.gameboard.getHitCells(),\n      \"hits\"\n    );\n    updateCellClasses(\n      \"playersBoard\",\n      gameLoop.humanPlayer.gameboard.getHitCells(),\n      \"hits\"\n    );\n  }\n});\n"]}