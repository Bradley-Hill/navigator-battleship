{"version":3,"sources":["ship.ts","gameboard.ts","player.ts","gameLoop.ts","script.ts"],"names":[],"mappings":";;;;;AIAA,IAAA,UAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;ADAA,AFAA,ACAA,AEGA,AJMA,IGTA,AFAA,ACAA,IEGQ,CAAC,AJMO,CCThB,GAAA,EEAA,ADAA,GCAA,ADAA,CFS0B,CCT1B,ADS2B,CCT3B,GDSuC,CGTvC,ADAA,AEGyB,CDHzB,ADAA,AEG0B,AJMa,QCTvC,CAAA,SEAA,ADAA,AEG4C,CDH5C,ADAA,CEG8C,YAAA;ADF9C,AFuBA,ACZA,EERE,AJMA,EGTF,ECGQ,GHoBQ,ACZA,AFFP,GGTT,GAAA,GCGoB,GFQQ,AERL,CDHvB,ADW6B,CCX7B,CFuB+B,CAAC,IAAY,ACZC,AERd,CAAC,CHoBY,ACZC,OCX7C,CAAA,ICG6C,CAAC,WAAW,CAAC;ADQ1D,EFaE,ACZA,AERA,EJME,ECcE,AGpBE,GDOQ,ADCP,CFFC,EAAE,GCcG,CDdC,ECca,CGpBR,GAAG,CDOM,CAAA,EAAA,ICPE,CAAC,aAAa,CAAC,gBAAgB,CAAC;EDQ9D,ACPA,EHoBE,ACZA,AFFA,EGCE,ACPE,EHoBA,EAAE,CCZC,AFFA,EEEE,AFFA,CGCC,AFaA,ADdA,GGCa,CCPP,EFQA,CERG,QAAQ,CAAC,aAAa,CAAC,eAAe,CAAC;EAE5D,EDME,AFaA,ACZA,AFFA,EILI,EHmBA,ADdA,ECcE,ADdA,GEEG,CEPG,CDMD,AFaA,ACZA,AFFA,CCcC,ACZD,CCDE,ADCF,AEPI,CDMF,ACNE,CDMF,ADCF,AEPI,CHmBC,CEbH,AFaI,AGnBF,QDMF,CAAA,ADCF,CAAA,AEPI,CAAA,UDMU,EAAC,EDCA,AEPG,EDMC,ADCH,AEPE,CDME,ACNA,CFOF,CAAC;EELhC,EDKE,ADCA,AFFA,ECamB,AGjBjB,EFME,EAAE,EDWmB,ADbjB,EGCE,AFYiB,ADbjB,EGCE,CAAA,ADCC,CCDD,AHDE,CIJC,CDKH,ADCI,QCDJ,CAAA,CDCc,CENC,EFME,QCDL,CCLc,CDKb,ADCc,CENC,IDKV,CAAC;IAC/B,AFW+B,ACV/B,AENA,AJIA,CCYiC,EAAE,ADZhC,EAAA,GEEK,CCDC,CDCC,AENA,CDKC,ACLA,GJIR,CCYgC,ECVlB,CFFd,CIJgB,CDKR,ACLS,AJIjB,UGCQ,CCLoB,CDKpB,ACLqB,SAAS,EAAE,aAAa,CAAC;EAC3D,CAAC,CFMC,ECDE,AFWA,ADZA,GIJG,CDKC,AHDA,CGCC,AHDA,ECYL,ICVW,CDUN,ADZO,CCYN,ACVO,CFFC,EGCE,CAAC,AFWP,CAAC,ICVE,ICDa,GAAG,CAAA,CAAA,EAAA,GDCN,CAAa,EAAE,CAAa,EAAE,ECDxB,CAAA,KDCwC,EAAA,QCDzB,EAAC,EAAE,CAAC;ICJlD,AJIA,CAAC,CGCC,ADAuB,EDUV,EEVT,ADAmB,CCAlB,ADAkB,AELlB,CAAC,EHea,EAAE,ACVE,CELZ,CAAC,GFKW,CCAP,ADAO,CCAN,CDAM,QCAG,CAAC,WAAW,ACLA,CDKC,ACLA,CDKC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;ECJjE,EJIE,EGCE,AFSyB,CAAE,CCVJ,CDUM,ACVN,CCCnB,AHDA,CGCC,CDDkB,AFAnB,CEAgC,QDUP,ADVzB,CGCY,CAAC,KHDb,EAAA,EGCsB,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;ECJjE,IDKI,ADFoC,AEHpC,AJIA,ECSmC,EER/B,AHDA,CGCC,GHDG,CCS4B,ADT3B,GIJG,IDKI,AHDA,CGCC,GHDG,IIJI,AJIA,CAAC,CGCC,CAAC,IHDI,EAAE,EIJE,EAAE,CDKC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;ICJ/D,EDME,ADJsC,EFEpC,EGEE,AFOF,ACXoC,CCIjC,ADJiC,CFEhC,CAAC,CIJC,CAAC,CFE6B,CFE3B,CCSD,EAAE,ADTE,CGEC,ADJuB,CCItB,ADJsB,CEFrB,CFEqB,AEFpB,AJIA,CCSD,MEPQ,GAAG,CAAA,ACNC,CDMD,ACNE,EDMF,OCNW,EAAE,EDMb,CAAA,SCNyB,CAAC,KDMX,EAAC,EAAE,CAAC;ECLnD,CAAC,GDMG,AHFA,EEHsC,CAAA,AEDnC,CDMC,AFOF,CEPG,CDLiC,CDYjC,ACZ8C,EDY5C,KAAK,CEPG,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;ICL9D,AJIA,EGEE,ADNmD,ICM/C,AFOF,CEPG,ACNA,CAAC,EHaA,EAAE,CGbG,CAAC,GDMG,CAAC,SAAS,CAAC,WAAW,ACNA,CDMC,ACNA,CDMC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;ECLhE,CJIC,GGEG,ADNA,GDaC,CEPG,ADNA,CCMC,GDNG,CAAC,MCMM,CAAC,ADNA,EAAE,OCMO,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;AHDlE,EIHE,IDMI,AFCmC,AGPnC,CHWE,CAAC,ACZD,KCOK,CAAC,EDPE,CAAC,CCOC,ACNA,CDMC,CCNC,MFDM,CCOC,ADPA,ECOE,WDPW,CAAC,CAAC,EAAE,CAAC,CAAC;AFX9C,ICmBM,AGNF,CHUK,CACJ,ACZC,CFZN,CGmBQ,AHnBR,IGmBY,CAAC,GCNG,CAAC,CJbjB,GAAA,GGmBwB,CAAA,CAAE,KHnB1B,EIaiC,CAAC,OAAO,EAAE,YAAA;IHYvC,ACZA,CAAC,CECC,EDME,IAAI,CAAC,CCNC,CHWC,AGXA,EHWA,OGXS,CAAA,CHWT,AGXW,CDMC,CAAA,CAAE,SFMvB,UAAkB,EAClB,UAAkB,EAClB,QAAgB,EAChB,WAAsC,EAAA;ICdxC,AEAA,CAAC,CDMC,AFUA,AGhBA,IHgBI,IAAI,GAAG,CAAA,CAAA,CChBG,CDgBH,CChBK,KDgBL,CAAA,GChBK,ODgBK,EAAC,QAAQ,AChBJ,CDgBK,OChBW,EAAA;EEC9C,CAAC,CDMC,CAAC,CFUC,AChBA,GEAG,CHgBC,AChBA,CDgBC,AChBA,IAAI,CAAC,GDgBG,GAAG,CChBC,CDgBC,CChBC;ICOrB,ACNA,EHiBE,ECjBE,GDiBG,AGjBA,CFAC,AEAA,GDMG,AFWA,CAAC,CEXC,ACNA,CAAC,CHiBC,CAAC,CCjBC,CDiBC,CAAC,CCjBC,ECMP,AFWS,GCjBG,KDiBK,EAAE,CAAC,CEXpB,CFWsB,CEXtB,CFWwB,MGjBM,CAAC;EAC9C,IDMI,EFWE,ACjBA,ECME,EFWE,ACjBA,CDiBC,CEXC,CAAC,ADNF,CDiBG,ECjBQ,CAAC,OCMC,AFWA,CEXC,GFWG,KEXK,EAAE,IFWI,KAAK,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;EGfjE,MDKM,AFWA,ACjBA,GECG,CHgBC,ACjBA,CDiBC,ECjBA,CDiBG,ECjBQ,CAAC,EECJ,CAAC,IHgBI,IAAI,CGhBY,EAAE,QHgBH,AGhBwB,EAAA,GHgBnB,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;IGf7D,IDKI,AFYA,AClBA,IDkBI,AGjBA,CHiBC,AGjBA,EFDE,CAAC,CDkBC,IAAI,CGjBC,GHiBG,AClBA,AECA,CHiBC,CClBC,AECA,GHiBG,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;IGhBjE,IDKI,EFYE,AClBA,EECE,CFDD,AECE,GFDC,CDkBG,CGjBC,CAAC,CFDD,CDkBG,AClBF,KAAK,CAAC,IAAI,CAAC,MAAM,AECE,CFDF,CAAE,CECG,EFDA,OECA,CFDQ,AECR,CFDS,KECT,CAAU,GFDQ,CAAC,IAAI,CAAC,AECL,CAAC,IAAI,EAAA,QAAA,CAAQ;IACrE,IDKI,AFYA,EClBE,EECE,CFDD,AECE,GFDC,EECI,CAAC,CFDD,CAAC,KAAK,CAAC,IAAI,CAAC,GECK,GFDC,AECE,CFDF,CAAE,GAAG,IECH,CAAA,GFDW,CAAC,EECZ,CAAU,MFDW,CAAC,EECH,CAAC,CFDM,CAAC,EECH,EAAA,QAAA,CAAQ;IAClE,IDKI,AFYA,AGjBE,EFAA,EDiBE,AGjBE,CHiBD,CCjBG,CEAC,MHiBI,CAAC,CGjBG,CAAC,CFAC,CDiBD,CAAC,CAAC,ACjBE,CDiBD,EAAE,CAAC,CAAC,CAAC,ECjBI,CAAC,EEAE,OFAO,CAAC,cAAc,CAAA,CAAE;IEC7D,EDII,CACD,CFYC,AGjBA,CAAC,CFAC,GCKG,CDLG,AEAF,CAAC,EHiBE,CAAC,IAAI,ACjBE,CDiBD,CAAC,CAAC,ACjBE,CDiBD,AGjBA,CHiBC,AGjBA,CHiBC,CAAC,IAAI,ACjBE,CAAC,AEAF,EHiBE,AGjBA,IHiBI,GCjBK,CAAC,CEAD,CAAC,IAAI,CAAC,IFAM,CAAA,CAAE,EEAA,CAAA,CAAE,CAAC;IAC1D,IDKI,AFYA,CGjBC,CFAC,ECKE,CAAC,ACLA,CFCD,AEDE,CFCD,EDgBI,AGjBA,CHiBC,AGjBA,EAAE,CAAC,CHiBC,CEZC,AFYA,CEZC,AFYA,AGjBA,CHiBC,CAAC,AChBF,CDgBG,AChBF,CDgBG,CAAC,EChBA,CAAC,CEDG,CAAC,GHiBG,CGjBC,EDKE,AFYA,AGjBA,CDKC,ACLA,CFCV,CEDY,CHiBC,CEZC,ACLA,CDKC,ADJX,EAAA,SCIsB,CAAC;MACpD,AFYA,AGjBA,KAAK,CFA6B,GEAzB,CAAC,GFAwB,AEArB,CAAC,EAAE,CFAsB,AEArB,CFAsB,CAAC,CAAC,AEArB,KFA0B,GAAC,CEAlB,CAAC,EFAqB,EEAjB,EFAqB,AEAnB,CFAoB,AEAnB,CFAoB,CAAC,AEAnB,EAAE,EFAqB,GAAC;MCO/D,AFWA,EGjBE,EDME,ADP8B,CCO7B,ADP0D,CAAC,AECxD,CHiBD,GCjBD,AEAM,CHiBD,ACjBJ,EEAQ,GDMC,CAAC,EDNF,CAAC,CEAO,CAAC,EFAJ,CAAC,ECMM,CAAA,CAAE,MDNP,AEAe,CAAC,GFAZ,EAAA,AEAiB,CAAC;IHkB9C,CAAC,CEXC,ECNE,EDME,CAAC,CDP0B,AECzB,CAAC,MFDwB,ECOhB,CAAC,ACNA,CFDmB,AEClB,CFDmB,CAAC,CAAC,AEClB,CAAC,IFDsB,CCOjB,CAAA,ACNC,CDMC,ADPgB,AEChB,IFDoB,IAAI,CAAC,CAAC,CAAC,KAAK,GAAC;ICQ/D,AFWA,CEXC,GCNG,EFF6B,CAA8B,CAAC,EACxD,EECI,CHiBC,AGjBA,EHiBA,SAAA,AGjBW,CAAC,IAAI,CAAC,QHiBhB,UAAkB,EAAE,UAAkB,EAAA;IEVpD,ECNE,MFDM,MCOM,EAAE,CDPC,GAAG,IAAI,CCOR,eAAA,EAAA;ICLhB,EDME,AFUA,IEVI,AFUA,ACjBA,ICOI,CAAC,IFUI,CAAC,IAAI,CEVC,AFUA,CEVC,SAAS,AFUA,CEVC,AFUA,CAAC,UAAU,CEVC,AFUA,CEVA,AFUC,CEVC,EAAE,KFUK,EAAE;EGfzD,MDMM,AFUA,ACjBA,OCOO,CAAC,CFUC,CAAC,CEVC,CAAC,EFUE,CAAC,UAAU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","file":"script.221c08a2.js","sourceRoot":"..\\src","sourcesContent":["export interface Ship {\r\n  length: number;\r\n  impacts: number;\r\n  sunk: boolean;\r\n  position: [number, number][] | null;\r\n  hit(): void;\r\n  isSunk(): void;\r\n}\r\n\r\nexport function createShip(size: number): Ship {\r\n  return {\r\n    length: size,\r\n    impacts: 0,\r\n    sunk: false,\r\n    position: null,\r\n    hit() {\r\n      this.impacts++;\r\n    },\r\n    isSunk() {\r\n      if (this.impacts >= this.length) {\r\n        this.sunk = true;\r\n      }\r\n    },\r\n  };\r\n}\r\n","import { createShip, Ship } from \"../src/ship\";\r\n\r\nexport type Cell = {\r\n  occupied: boolean;\r\n  hit: boolean;\r\n  ship: Ship | null;\r\n};\r\n\r\nexport interface Gameboard {\r\n  size: number;\r\n  grid: Cell[][];\r\n  createShips(\r\n    gameboardX: number,\r\n    gameboardY: number,\r\n    shipSize: number,\r\n    orientation: \"horizontal\" | \"vertical\"\r\n  ): Ship | null;\r\n  receiveAttack(gameboardX: number, gameboardY: number): void;\r\n  missedAttacks: [number, number][];\r\n  allShipsSunk(): boolean;\r\n  getMissedShots: () => number[][];\r\n  getHitCells: () => number[][];\r\n}\r\n\r\nexport function createGameboard(size: number): Gameboard {\r\n  let gameboard: Gameboard = {\r\n    size: size,\r\n    grid: Array.from({ length: size }, () =>\r\n      Array.from({ length: size }, () => ({\r\n        occupied: false,\r\n        hit: false,\r\n        ship: null,\r\n      }))\r\n    ),\r\n    createShips(\r\n      gameboardX: number,\r\n      gameboardY: number,\r\n      shipSize: number,\r\n      orientation: \"horizontal\" | \"vertical\"\r\n    ): Ship | null {\r\n      let ship = createShip(shipSize);\r\n      ship.position = [];\r\n\r\n      for (let i = 0; i < shipSize; i++) {\r\n        let x = gameboardX + (orientation === \"horizontal\" ? i : 0);\r\n        let y = gameboardY + (orientation === \"vertical\" ? i : 0);\r\n\r\n        if (x >= size || y >= size || gameboard.grid[x][y].occupied) {\r\n          return null;\r\n        }\r\n        ship.position.push([x, y]);\r\n        gameboard.grid[x][y].ship = ship;\r\n        gameboard.grid[x][y].occupied = true;\r\n      }\r\n      return ship;\r\n    },\r\n    receiveAttack(gameboardX: number, gameboardY: number): void {\r\n      if (gameboard.grid[gameboardX][gameboardY].occupied) {\r\n        gameboard.grid[gameboardX][gameboardY].hit = true;\r\n        gameboard.grid[gameboardX][gameboardY].ship?.hit();\r\n      } else {\r\n        gameboard.missedAttacks.push([gameboardX, gameboardY]);\r\n      }\r\n    },\r\n    missedAttacks: [],\r\n    allShipsSunk() {\r\n      for (let i = 0; i < this.grid.length; i++) {\r\n        for (let j = 0; j < this.grid.length; j++) {\r\n          if (this.grid[i][j].occupied) {\r\n            this.grid[i][j].ship?.isSunk();\r\n            if (!this.grid[i][j].ship?.sunk) {\r\n              return false;\r\n            } else {\r\n              continue;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n    getMissedShots: function () {\r\n      return this.missedAttacks;\r\n    },\r\n    getHitCells: function () {\r\n      const hitCells: number[][] = [];\r\n      for (let i = 0; i < this.size; i++) {\r\n        for (let j = 0; j < this.size; j++) {\r\n          if (this.grid[i][j].hit) {\r\n            hitCells.push([i, j]);\r\n          }\r\n        }\r\n      }\r\n      return hitCells;\r\n    },\r\n  };\r\n  return gameboard;\r\n}\r\n","import { createGameboard, Gameboard } from \"../src/gameboard\";\r\n\r\nexport interface Player {\r\n  isHuman: boolean;\r\n  gameboard: Gameboard;\r\n  name: \"Player 1\" | \"Player 2\";\r\n  isMyTurn: boolean;\r\n  makeHumanMove: (x: number, y: number, opponent: Player) => void;\r\n  makeComputerMove: (opponent: Player) => void;\r\n  toggleTurn: () => void;\r\n}\r\n\r\nexport function createPlayer(isHuman: boolean): Player {\r\n  return {\r\n    isHuman: isHuman,\r\n    gameboard: createGameboard(10),\r\n    name: isHuman ? \"Player 1\" : \"Player 2\",\r\n    isMyTurn: isHuman,\r\n    makeHumanMove: function (x: number = 0, y: number = 0, opponent: Player) {\r\n      if (this.isHuman) {\r\n        opponent.gameboard.receiveAttack(x, y);\r\n      }\r\n    },\r\n\r\n    makeComputerMove: function (opponent: Player) {\r\n      if (!this.isHuman) {\r\n        let validMove = false;\r\n        let x: number = 0;\r\n        let y: number = 0;\r\n        while (!validMove) {\r\n          x = Math.floor(Math.random() * opponent.gameboard.size);\r\n          y = Math.floor(Math.random() * opponent.gameboard.size);\r\n\r\n          const missedShots = opponent.gameboard.getMissedShots();\r\n          const hitCells = opponent.gameboard.getHitCells();\r\n          if (\r\n            !missedShots.some((shot) => shot[0] === x && shot[1] == y) &&\r\n            !hitCells.some((cell) => cell[0] === x && cell[1] === y)\r\n          ) {\r\n            validMove = true;\r\n          }\r\n        }\r\n        opponent.gameboard.receiveAttack(x, y);\r\n      }\r\n    },\r\n    toggleTurn: function () {\r\n      this.isMyTurn = !this.isMyTurn;\r\n    },\r\n  };\r\n}\r\n","import { createGameboard } from \"../src/gameboard\";\r\nimport { createPlayer, Player } from \"../src/player\";\r\n\r\nexport interface Gameloop {\r\n  startGame: () => void;\r\n  humanPlayer: Player;\r\n  compPlayer: Player;\r\n  manageTurns: () => void;\r\n  checkEndOfGame: () => void;\r\n  gameOver: boolean;\r\n}\r\n\r\nexport function createGameLoop(): Gameloop {\r\n  let gameLoop: Gameloop = {\r\n    humanPlayer: createPlayer(true),\r\n    compPlayer: createPlayer(false),\r\n    startGame: function () {\r\n      this.humanPlayer.gameboard = createGameboard(10);\r\n      this.humanPlayer.gameboard.createShips(0, 0, 1, \"horizontal\");\r\n      this.humanPlayer.gameboard.createShips(0, 1, 1, \"horizontal\");\r\n      this.humanPlayer.gameboard.createShips(0, 2, 1, \"horizontal\");\r\n\r\n      this.compPlayer.gameboard = createGameboard(10);\r\n      this.compPlayer.gameboard.createShips(0, 0, 1, \"horizontal\");\r\n      this.compPlayer.gameboard.createShips(0, 1, 1, \"horizontal\");\r\n      this.compPlayer.gameboard.createShips(0, 2, 1, \"horizontal\");\r\n\r\n      while (!this.gameOver) {\r\n        this.manageTurns();\r\n        this.checkEndOfGame();\r\n      }\r\n    },\r\n    manageTurns: function () {\r\n      if (this.humanPlayer.isMyTurn) {\r\n        // this.humanPlayer.makeHumanMove(\r\n        //   0,\r\n        //   0,\r\n        //   /* Take co-ordinates from DOM manipulation */ this.compPlayer\r\n        // );\r\n      } else {\r\n        this.compPlayer.makeComputerMove(this.humanPlayer);\r\n      }\r\n\r\n      this.humanPlayer.toggleTurn();\r\n      this.compPlayer.toggleTurn();\r\n    },\r\n    checkEndOfGame: function () {\r\n      if (this.compPlayer.gameboard.allShipsSunk()) {\r\n        console.log(\"Congratulations! You have won!\");\r\n        this.gameOver = true;\r\n      } else if (this.humanPlayer.gameboard.allShipsSunk()) {\r\n        console.log(\"Game Over, you lost...\");\r\n        this.gameOver = true;\r\n      }\r\n    },\r\n    gameOver: false,\r\n  };\r\n  return gameLoop;\r\n}\r\n","import { createGameLoop } from \"../src/gameLoop\";\r\nimport { Gameboard } from \"./gameboard\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  const startGameBtn = document.querySelector(\"#startBtn\");\r\n  const opponentBoard = document.querySelector(\".opponentBoard\");\r\n  const playersBoard = document.querySelector(\".playersBoard\");\r\n\r\n  const gameLoop = createGameLoop();\r\n\r\n  if (opponentBoard instanceof HTMLElement) {\r\n    createGrid(gameLoop.humanPlayer.gameboard, opponentBoard);\r\n  } else {\r\n    console.error(\"Opponent board not found\");\r\n  }\r\n  if (playersBoard instanceof HTMLElement) {\r\n    createGrid(gameLoop.humanPlayer.gameboard, playersBoard);\r\n  } else {\r\n    console.error(\"Players board not found\");\r\n  }\r\n\r\n  if (startGameBtn) {\r\n    startGameBtn.addEventListener(\"click\", () => {\r\n      gameLoop.startGame();\r\n    });\r\n  } else {\r\n    console.error(\"Start Game button not found\");\r\n  }\r\n\r\n  function createGrid(gameboard: Gameboard, htmlGrid: HTMLElement) {\r\n    htmlGrid.innerHTML = \"\";\r\n    htmlGrid.style.gridTemplateColumns = `repeat(${gameboard.size}, 1fr)`;\r\n    htmlGrid.style.gridTemplateRows = `repeat(${gameboard.size}, 1fr)`;\r\n    const root = document.documentElement;\r\n    root.style.setProperty(\"--num\", gameboard.size.toString());\r\n    for (let i = 0; i < gameboard.size; i++) {\r\n      for (let j = 0; j < gameboard.size; j++) {\r\n        const cell = document.createElement(\"div\");\r\n        cell.classList.add(\"cell\");\r\n        htmlGrid.appendChild(cell);\r\n      }\r\n    }\r\n  }\r\n});\r\n"]}