{"version":3,"sources":["ship.ts","gameboard.ts","player.ts","gameLoop.ts","script.ts"],"names":[],"mappings":";;;;;AIAA,IAAA,UAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;ADAA,ACGA,AJMA,IGTA,ICGQ,CAAC,AJMO,MGThB,GAAA,CHS0B,CAAC,IAAY,CGTvC,ACGyB,CDHzB,ACG0B,AJMa,kBGTvC,ACG4C,CDH5C,CCG8C,YAAA;ADF9C,ECGE,AJMA,EGTF,ECGQ,GJMC,GGTT,GAAA,GCGoB,GAAG,CDHvB,CAAA,MCG+B,CAAC,QDHhC,CAAA,ICG6C,CAAC,eAAe,CAAgB;ADW7E,ECVE,EJME,EINI,GDUQ,CHJN,EAAE,IAAI,CING,GAAG,GDUQ,CAAC,ICVD,CAAC,WDUyB,EAAA,ACVZ,CAAC,cAAc,CAAC;EDW1D,ACVA,EJME,EGIE,ACVE,KJMG,EAAE,CGIC,AHJA,GGIa,CCVP,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC;EACxD,EDUE,AHJA,EINI,EJMA,EAAE,KGIK,AHJA,EGIE,KAAK,ECVI,GAAG,QAAQ,CAAC,aAAa,CAC/C,aAAa,CACO;EACtB,EDQE,AHJA,EIJI,MJII,EAAE,GGIG,CHJC,CGIC,ACRE,GAAG,MDQL,ECRa,CAAC,WDQJ,ECRiB,CAAC,aDQO,EAAA,CCRS,CAAC;EAC9D,EJIE,EGIE,ACRE,CJID,EAAA,CGIG,CAAC,OCRS,AJIb,GIJgB,CDQD,AHJf,CGIgB,CHJhB,KIJwB,CAAC,SDQO,GAAG,CCRG,CAAC,cDQY,CCRG,CAAC;EAE5D,IDOI,ACPA,AJGA,IGII,AHJA,CGIC,AHJA,GIHG,GAAG,CAAA,AJGC,CIHD,CJGG,CGIC,ACPJ,CDOK,SCPL,CAAA,MDOqB,GAAG,KCPV,EAAC,KAAK,CAAC,GDOmB;ECLvD,EDME,AHJA,CGIC,AHJA,CIFC,YAAY,IAAI,WAAW,EAAE;IDO/B,ACNA,AJEA,MAAM,EAAA,IIFM,CDMC,ACNA,EDME,EHJT,CIFY,CAAC,KDMJ,AHJT,EIFoB,AJEpB,GIFuB,MAAM,GDMpB,EAAA;ICLf,EDME,AHJA,IAAI,GGIG,CHJC,CIFC,AJEA,CIFC,CDMC,CAAC,IHJI,IAAI,GGIG,CHJC,CAAC,CIFC,CAAC,IJEI,EAAE,CIFC,EAAE,YAAA;IDOtC,CAAC,CCNC,EJEE,IAAI,CAAC,IAAI,CIFC,CAAC,CJEC,IIFI,AJEA,CIFC,OAAO,GAAG,MAAM;IDOrC,ACNA,CAAC,CAAC,AJEA,SGIS,EAAE,CAAA,CAAA,EAAA,QAAA,CAAA,YAAY,EAAC,IAAI,EAAE,gBAAgB,CAAC;ECLnD,EDME,AHJA,UGIU,EAAE,CAAA,CAAA,EAAA,QAAA,CAAA,YAAY,EAAC,KAAK,EAAE,gBAAgB,CAAC;ECJnD,CJCC,CGIC,ECLE,ODKO,EAAE,ICLI,KDKJ,OCLgB,GDKhB,EAAA,MCL2B,EAAE;AJE5C,IIDI,EDKE,IAAI,CAAC,GCLG,CAAC,ODKO,CCLC,CAAC,CDKC,IAAI,MCLM,CAAC,SAAS,EAAE,aAAa,EAAE,eAAe,CAAC;AJd9E,EIeE,CAAC,GDKG,CHpBN,CAAA,CIeS,CDKC,CAAC,OHpBX,GAAA,CGoBsB,CAAC,QHpBvB,CGoBgC,GAAG,CAAA,CAAA,EAAA,WAAA,CAAA,eAAe,EAAC,EAAE,CAAC;ICJlD,EDKE,IAAI,CAAC,ACLA,CAAC,KAAK,CAAC,IDKI,CAAC,SAAS,CAAC,WCLW,CAAC,EDKE,CAAA,CAAE;ECJ/C,IDMI,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAA,CAAA,EAAA,WAAA,CAAA,eAAe,EAAC,EAAE,CAAC;ECLnD,IDMI,ACNA,IDMI,CAAC,OCNO,GDMG,CAAC,QCNQ,CDMC,CAAC,SCNS,EAAE,GDMG,CAAA,CAAE;ICL5C,EDME,IAAI,CAAC,GCNG,CAAC,ODMO,CAAA,ACNC,CDMC,ACNA,WAAW,CAAC,SAAS,EAAE,YAAY,EAAE,cAAc,CAAC;EAC1E,CAAC,CDMC,CAAC,ICNI;AF7BT,ICoCI,ADpCJ,AE8BI,OAAO,CAAC,GDMG,ADpCf,ECoCiB,ACNA,CF9BjB,AE8BkB,OF9BlB,CCoCiB,ADpCjB,YCoC2B,CAAU,EAAE,CAAU,CCNN,CDMM,ADpCjD,AE8B4C,CF9B5C;AAcA,EEiBE,IDMI,GDvBU,CCuBN,IAAI,CAAC,MDvBa,CAC1B,CCsBqB,EAAE,IDtBP,EAChB,gBAAyB,EAAA;EAEzB,AEeA,IAAI,EDKE,CDpBC,SEeS,IAAI,kBAAkB,EAAE;IFdtC,AEeA,EDKE,KDpBK,EAAE,GEeG,CAAC,GFfG,aEea,CAAC,OAAO,EAAE,YAAA;IFdvC,ECoBE,ACLA,IDKI,GDpBG,CCoBC,CAAC,ADpBA,CAAA,CAAA,EAAA,KEeS,CAAC,CDKC,CAAC,GDpBZ,CAAA,EEekB,EDKE,CCLC,CDKC,GCLG,MFfV,EAAC,EAAE,CAAC;IAC9B,EEeE,EDKE,ADpBA,EAAE,AEeA,EDKE,CAAC,IDpBI,CCoBC,EDpBE,MEeM,CDKC,ECLE,CFfC,CCoBC,CAAC,CDpBC,ICoBI,MDpBM,GCoBG,CCLC,CDKC,ACLA,KAAK,KAAK,MAAM;IFd5D,EEeE,IDKI,EDpBE,ECoBE,ADpBA,AEeA,CDKC,ECLE,CAAA,CAAA,EFfI,AEeJ,KDKS,CAAC,ICLV,CAAA,QDKuB,CAAC,CAAC,EAAE,CAAC,CCLd,CDKgB,CCLf,GDKmB,CAAC,UAAU,CAAC,CCLf,CAAC;IFd7C,EEeE,IDKI,IAAI,ACLA,CDKC,ACLA,KFfK,EAAE,EEeE,CAAA,CAAE,GDKG,CAAA,CAAE,ODpBO;IAClC,EEgBE,IDII,ACJA,IDII,CAAC,EDpBE,ECoBE,ADpBA,CCoBC,GCJG,KDIK,ADpBT,ECoBW,KCJK,OFhBN,CAAa,EAAE,CAAa,AEgBX,EFhBa,AEgBX,QFhB2B,EAAA;MAA9C,EEiBrB,EFjBqB,CAAA,CCqBjB,IAAI,ADrBa,CCqBZ,CCJC,CACR,EFlBmB,CAAA,EAAA,GEkBX,CDGU,ACHT,CDGU,UAAU,ACHT,CDGS,ACHR,CDGU,QCHD,EAC9B,aAAa,EACb,eAAe,CAChB;MACH,CAAC,CFtBsB,CAAA,GCsBjB,ADtBiB,CAAa,AEsB7B,GDAG,CAAC,UAAU,CAAC,UAAU,CAAA,CAAE;MDtBE,EEuBlC,IDCI,GCDG,CDCC,ACDA,IDCI,CAAC,ACDA,CAAC,SDCS,CAAC,QAAQ,EAAE,MCDM,CAAC;MFvBL,AEwBtC,IFxBsC,CAAA,GCyB9B,EDzB8B,ECyB1B,CAAC,EDzByB,CAAA,EAAA,KCyBf,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC;MCA1D,EFzBsC,CAAA,CEyBlC,EFzBkC,CAAa,CC0B3C,IAAI,CAAC,GCDG,WDCW,CAAA,ACDC,CDCC,UCDU,EAAE;MFzBU,EE0BjD,MDCM,IAAI,ACDA,CDCC,ACAT,IDAa,CAAC,GCAN,CAAC,IDAa,EAAE,KCAJ,CAAC,SAAS,EAC9B,YAAY,EACZ,cAAc,CACf;MF7BH,AE8BA,CAAC,MAAM,CF9BC,CAAC,CC2BC,IAAI,CAAC,GD3BG,CAAC,OC2BO,CAAC,KD3BK,CAAC,CAAC,EAAE,CC2BC,AD3BA,CC2BA,AD3BC,CC2BC;AFpD7C,IAAA,AC0BI,CAAC,GE8BG,EHxDR,GAAA,EGwDe,CDHC,ACGA,IDHI,AFrDpB,CEqDqB,AFrDrB,AGwDqB,CAAC,SDHS,CAAC,EFrDhC,CAAA,OEqD0C,CAAA,CAAE,GCGG,CAAC;AH9BhD,ICEI,EE6BE,GH/BU,KE4BF,AD1BA,EAAE,QDFe,CAAC,ACEhB,IDF4B,EAAA,KCE5B,EAAA;EDDd,IAAI,ACEA,AE8BA,IF9BI,CAAC,CC0BC,ECIE,CHhCC,AGgCA,GHhCc,CCEV,GAAG,CAAC,GE8BG,CF9BC,AE8BD,CF9BE,AE8BA,QF9BQ;IDDhC,ACEA,AE8BA,CF9BC,AE8BA,CAAC,EHhCE,EE4BE,AF5BA,IAAI;EGiCZ,CAAC,CHhCC,ACEA,IC0BI,AF5BA,CGgCC,CHhCC,KAAK,CAAC,IAAI,ACEA,CDFC,CCEC,SAAA,iBAAU,QAAgB,EAAA;IE+B5C,EDJE,AF7BiB,ACGjB,IAAI,CAAC,AE8BA,CHjCkB,AGiCjB,EHjCmB,CCGhB,CAAC,CE8BC,CAAC,KF9BK,EAAE,6CE8B6C,CAAC;EACrE,EDJE,AF9B+B,CE8B9B,AF9BgC,EAAE,CCI/B,IAAI,IAAI,CAAC,EDJsB,cCIN,EAAE;EEgCjC,EDLE,EF9BE,ICII,CE+BC,EHnCL,CCIQ,IC0BI,AF9BP,CAAC,CE8BQ,CCKC,CF/BC,AEgClB,CHpCY,CAAC,CCIQ,IC0BL,ECMI,EFhCS,AEiC7B,CFjC8B,OEiCT,EFjCkB,AEkCvC,CDRgB,AD1BwB,EC0BxB,MD1BgC,CEkC9B,EAAA;IAElB,EDTE,EF/Ba,EE+BT,AD1BA,EEmCE,CAAC,CDTC,AF/BW,ACKX,CC0BC,CF/BY,MCKL,AEmCA,CFnCC,EC0BE,ACSA,CDTC,CCSC,EFnCE,GAAG,CAAC,EC0BE,AD1BA,CC0BC,YAAY,CAAA,CAAE,EAAE;ICUhD,EHzC2B,CAAE,CEgCzB,CFhC2B,GCMvB,AEmCA,CDTC,ACSA,CDTC,ED1BE,EEmCE,CAAC,EHzCgB,gBCME,CEmCC,EFnCc,CACtC,AEkC2B,CFlC1B,CAAC,EAAE,CCyB4B,ADzB3B,CCyB4B,ADzB3B,EACN,CAAC,AEiC0B,CFjCzB,AEiCyB,EFjCvB,CAAC,CAAC,EACN,AEgC2B,CFhC1B,AEgCoC,CFhCnC,CAAC,EAAE,CAAC,CAAC,EACP,CAAC,AE+B6C,CF/B5C,AE+B6C,EF/B3C,CAAC,CAAC,AE+B6C,CF/B5C,CACR,AE8BoD,QAAA,CAAQ;IACrE,IDTI,AFjCiC,IEiC7B,ADpBA,AE6BA,CDTC,ACSA,EH1C6B,CCa1B,EE6BE,CAAC,EDTE,GAAG,IAAI,ADpBA,GAAG,IE6BI,GAAG,EF7BtB,OE6BsB,CAAA,IF7BV,CAAa,CE6BH,CAAU,GF7BK,EAAA,IE6BI,CAAC,IAAI,EAAA,QAAA,CAAQ;IAClE,EDTE,CAAC,CCSG,EH1CF,EG0CM,CDTD,ECSI,EDTA,CFjCD,EAAE,CEiCG,CAAC,CCSG,CAAC,CH1CH,QEiCU,CAAC,KCSO,IDTE,CAAC,YAAY,CAAA,CAAE,EAAE;ICUxD,IDTI,ACSA,CAAC,CH1CD,GEiCK,AFjCF,CEiCG,ADrBA,AE8BA,CH1CD,AG0CE,IF9BI,CDZD,GCYK,CAAC,EE8BE,CF9BC,AE8BA,KF9BK,CAAC,CE8BC,EAAE,EDTE,CAAC,ADrBA,GAAG,CAAC,EAAE,AE8BA,CF9BC,AE8BA,GF9BG,CAAC,AE8BA,CAAC,CF9BC,CAAC,EAAE,EAAE,EE8BE,CAAA,CAAE,CAAC;IAC1D,IDTI,CCSC,CH1CD,EEiCI,CAAC,ACSA,CH1CD,AG0CE,EH1CA,ACYE,CE8BC,CAAC,EF9BI,AE8BF,CDTC,ADrBE,AE8BF,GDTG,ADrBE,AE8BF,IDTI,ADrBE,CAAC,IE8BE,CF9BG,AE8BF,CF9BG,GE8BC,CF9BG,CAAC,AE8BF,CAAC,EAAE,EAAE,CF9BG,CAAA,CAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;MCsBvD,ACSA,GH1CC,EG0CI,IAAI,CF9BC,AE8BA,EF9BA,CE8BG,CAAC,CF9BJ,CE8BM,CAAC,GAAG,CF9BV,CAAuB,CAAC,KAAK,CAAC,AE8BX,CF9BY,AE8BX,CF9BY,EAAE,CE8BV,EAAE,CAAC,CF9BY,CAAC,AE8BX,CF9BY,CAAC,AE8BX,CF9BY,EAAA,CAAA,CAAA,EAA1C,KAAK,CAAC,CAAC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,KAAK,CAAC,CAAC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;ICsB/B,CAAC,CFtCoC,CAIjC,CAAC,AG2CD,IAAM,EF9BA,EE8BI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;IDR9C,AFvCE,CAIG,CACJ,EG2CG,IDTI,ADrBA,AE8BA,CF9BC,AE8BA,CDTC,QCSQ,CAAC,GAAG,CAAC,MAAM,CAAC;GDR/B,CFlCC,IG2CI,IF7BI,AE6BA,CAAC,EH3CE,EAAA,GG2CK,CAAC,CAAC,EF7BE,CAAC,AE6BA,CH3CV,AG2CW,CAAC,QAAQ,CAAA,CAAE,CH1C/B,QCawC,CAAC,CDbvB,EAClB,UAAkB,EAClB,QAAgB,EAChB,WAAsC,EAAA;EE+B1C,MCSM,CDTC,GDnBG,AE4BA,CAAC,GF5BG,CCmBC,GCSG,CAAC,CAAC,GAAG,CAAC,CF5BC,AE4BA,GF5BG,KE4BK,CAAA,CAAE,CF5BC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;ACoB3D,MF9BM,EGuCE,EHvCE,ECWE,AE4BA,EHvCE,ECWE,CDXC,CAAA,CAAA,EAAA,CGuCK,KHvCL,AGuCU,CHvCV,ECWa,GAAG,KDXN,ACWW,EDXV,EGuCc,EAAE,IHvCR,CAAC;AE3BrC,MF4BM,CE5BN,CAAA,EF4BU,AGuCA,CHvCC,GGuCG,CAAC,IHvCI,GE5BnB,AF4BsB,EAAE,CE5BxB,MCmE+B,CAAC,ODnEhC,ACmEuC,EAAE,UAAC,KAAK,EAAA;MHrCzC,KAAK,CGsCC,EF5BE,CDVC,CAAC,AGsCE,EF5BA,CDVC,CAAC,EAAE,AGsCE,CHtCD,EGsCI,CHtCD,ACUA,GAAG,CE4BG,CAAC,GHtCC,EAAE,CAAC,AGsCiB,EHtCf,EAAE,SCUS,CAAC,GAAG,CAAA,CAAE;QDThD,IAAI,AGsCA,CHtCC,CCUC,EDVE,AGsCA,EF5BE,IE4BI,CAAC,GHtCG,ACUA,EAAE,EDVE,AGsCA,CAAC,CAAC,IAAI,KHtCK,CGsCC,CAAC,GHtCG,IGsCI,CAAC,CAAC,EAAE,IHtCI,GAAG,CAAC,GAAG,CAAC,CAAC;QAC3D,IAAI,CAAC,CGsCC,EHtCE,ACUA,EE4BI,CAAC,CF5BD,EE4BI,CF5BH,GDVK,ACUF,IDVM,AGsCE,CAAC,MF5BE,AE4BI,CF5BH,AE4BI,CF5BH,CAAC,CDVG,ECUA,EE4BM,CHtCD,AGsCE,CAAC,EAAE,EF5BF,AE4BI,CF5BH,AE4BI,CF5BH,CAAC,EDVI,GAAG,CAAC,GAAG,CAAC,CAAC;QAEzD,IAAI,CAAC,CGqCC,EF5BE,CDTC,CGqCG,CAAC,CF5BD,CDTC,CGqCG,CF5BH,EDTI,CAAC,ACSF,IDTM,AGqCE,CAAC,GHrCC,GCSC,AE4BI,CHrCD,ACSF,AE4BI,CF5BH,CAAC,GAAG,EE4BM,CAAC,CHrCD,AGqCE,CHrCD,CGqCG,EF5BF,AE4BI,CHrCD,ACSF,AE4BI,CHrCD,ACSF,CDTG,ACSF,CDTG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;UAC3D,IGqCI,EF5BE,CDTC,GCUC,CDVG,CGqCC,CF3BH,AE2BI,IF3BA,CAAC,IACN,EE0BgB,CF1Bf,AE0BgB,CAAC,EF1Bd,AE0BgB,CAAC,CAAC,MF1BV,CAAC,SAAS,CAAC,IAAI,IAC3B,GAAC,IAAI,CAAC,IACN,GAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,IAC3B,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CACpC,UAAC,IAAI,EAAA;QDdjB,MGqCM,IFvBgB,OAAA,IAAI,AEuBL,CFvBM,AEuBN,CFvBO,AEuBL,CFvBM,KAAK,GAAC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAC;QDbpD,IAAI,AGqCA,CHrCC,AGqCA,GFxBiB,CAA8B,CACzC,CEu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CAAC,CAAC;MC4BpC,IAAI,CAAC,CE4BC,EF5BU,CAAC,CE4BP,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC;MF3BhC,ED3BA,EGuDI,GHvDa,AC2BV,CAAC,GD3BS,YC2BM,ED3BN,AC2BQ,GD3BR,QAAA,CAAA,YAAY,CAAA,EAAA,gBAAA,GAAA,cAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,gBAAA,CAAA,IAAA,EAAA,gBAAA,GAAA,cAAA,CAAA,IAAA,CAAA,CAAA,EAAE;QC4B7B,AE4BA,CF5BC,CD5BE,EC4BC,ED5BG,EC4BC,CAAC,GD5BE,EC4BG,CD5BH,AC4BI,IAAI,CAAC,MAAM,CAAA,CAAE,GD5BjB,AC4BoB,CD5BpB,KAAA,EC4B4B,CAAC,SAAS,CAAC,IAAI,CAAC;ME6BzD,EF5BE,CAAC,CD5BD,EC4BI,ED5BA,EC4BI,CAAC,CD5BD,GAAgB,CC4BV,CAAC,ED5Ba,EC4BT,CAAC,MAAM,CAAA,CAAE,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;IE6B3D,IF3BI,ED7BA,EC6BM,KD7BC,IAAI,EC6BM,GD7BD,AC6BI,ID7BA,EAAE,EC6BM,CAAC,SAAS,CAAC,cAAc,CAAA,CAAE;EE4B7D,MF3BM,ID7BE,AC6BI,ID7BE,IC6BM,GAAG,ID7BE,GAAG,CC6BG,CAAC,ED7BA,CAAC,MAAM,AC6BE,CD7BF,AC6BG,CD7BD,GAAG,GAAG,GAAG,CC6BG,CAAA,CAAE,SD7BO,GAAG,UAAU;EG0D3E,MF5BM,GE4BG,CHzDD,AC8BA,CAAC,GD9BK,QC8BM,CAAC,CD9BG,EGyDE,CHzDC,AC8BF,AE4BvB,CF5BwB,GD9BK,CAAC,KAAK,AG0DjB,CH1DkB,AC8BX,CE6BzB,GH3DwC,AC8BX,CD9BY,CC8BZ,AE6BZ,EACjB,GH5D+C,CAAA,CAAE,GAAG,CG4DnC,EAAA,CH5DuC,CAAC,IAAI,CAAC;IG8D9D,KAAK,CFhC6B,AEgC5B,EH7DA,IAAM,CC6BsB,AEgCrB,CAAC,GFhCwB,CAAC,CAAC,CAAC,ED7BnB,EG6DP,CH7DU,AC6BqB,CAAC,EEgC5B,CH7DU,CAAC,AC6BqB,AEgChC,IFhC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","file":"script.221c08a2.js","sourceRoot":"../src","sourcesContent":["export interface Ship {\n  length: number;\n  impacts: number;\n  sunk: boolean;\n  position: [number, number][] | null;\n  hit(): void;\n  isSunk(): void;\n}\n\nexport function createShip(size: number): Ship {\n  return {\n    length: size,\n    impacts: 0,\n    sunk: false,\n    position: null,\n    hit() {\n      this.impacts++;\n    },\n    isSunk() {\n      if (this.impacts >= this.length) {\n        this.sunk = true;\n      }\n    },\n  };\n}\n","import { createShip, Ship } from \"../src/ship\";\n\nexport type Cell = {\n  occupied: boolean;\n  hit: boolean;\n  ship: Ship | null;\n};\n\nexport interface Gameboard {\n  size: number;\n  grid: Cell[][];\n  createShips(\n    gameboardX: number,\n    gameboardY: number,\n    shipSize: number,\n    orientation: \"horizontal\" | \"vertical\"\n  ): Ship | null;\n  createAllShips(): void;\n  receiveAttack(gameboardX: number, gameboardY: number): void;\n  missedAttacks: [number, number][];\n  hitCells: number[][];\n  allShipsSunk(): boolean;\n  getMissedShots: () => number[][];\n  getHitCells: () => number[][];\n}\n\nexport function createGameboard(size: number): Gameboard {\n  let gameboard: Gameboard = {\n    size: size,\n    grid: Array.from({ length: size }, () =>\n      Array.from({ length: size }, () => ({\n        occupied: false,\n        hit: false,\n        ship: null,\n      }))\n    ),\n    createShips(\n      gameboardX: number,\n      gameboardY: number,\n      shipSize: number,\n      orientation: \"horizontal\" | \"vertical\"\n    ): Ship | null {\n      let ship = createShip(shipSize);\n      ship.position = [];\n\n      for (let i = 0; i < shipSize; i++) {\n        let x = gameboardX + (orientation === \"horizontal\" ? i : 0);\n        let y = gameboardY + (orientation === \"vertical\" ? i : 0);\n\n        if (x >= size || y >= size || gameboard.grid[x][y].occupied) {\n          return null;\n        }\n        ship.position.push([x, y]);\n      }\n\n      for (let [x, y] of ship.position) {\n        gameboard.grid[x][y].ship = ship;\n        gameboard.grid[x][y].occupied = true;\n      }\n\n      return ship;\n    },\n    createAllShips(): void {\n      const shipSizesArr = [6, 5, 4, 3, 2];\n\n      for (let size of shipSizesArr) {\n        let ship: Ship | null = null;\n        while (ship === null) {\n          const orientation = Math.random() < 0.5 ? \"horizontal\" : \"vertical\";\n          const gameboardX = Math.floor(Math.random() * this.size);\n          const gameboardY = Math.floor(Math.random() * this.size);\n\n          ship = this.createShips(gameboardX, gameboardY, size, orientation);\n        }\n      }\n    },\n    receiveAttack(gameboardX: number, gameboardY: number): void {\n      if (gameboard.grid[gameboardX][gameboardY].occupied) {\n        gameboard.grid[gameboardX][gameboardY].hit = true;\n        gameboard.grid[gameboardX][gameboardY].ship?.hit();\n        gameboard.hitCells.push([gameboardX, gameboardY]);\n      } else {\n        gameboard.missedAttacks.push([gameboardX, gameboardY]);\n      }\n    },\n    missedAttacks: [],\n    hitCells: [],\n    allShipsSunk() {\n      for (let i = 0; i < this.grid.length; i++) {\n        for (let j = 0; j < this.grid.length; j++) {\n          if (this.grid[i][j].occupied) {\n            this.grid[i][j].ship?.isSunk();\n            if (!this.grid[i][j].ship?.sunk) {\n              return false;\n            } else {\n              continue;\n            }\n          }\n        }\n      }\n      return true;\n    },\n    getMissedShots: function () {\n      return this.missedAttacks;\n    },\n    getHitCells: function () {\n      const hitCells: number[][] = [];\n      for (let i = 0; i < this.size; i++) {\n        for (let j = 0; j < this.size; j++) {\n          if (this.grid[i][j].hit) {\n            hitCells.push([i, j]);\n          }\n        }\n      }\n      return hitCells;\n    },\n  };\n  return gameboard;\n}\n","import { createGameboard, Gameboard } from \"../src/gameboard\";\n\nexport interface Player {\n  isHuman: boolean;\n  gameboard: Gameboard;\n  name: \"Player 1\" | \"Player 2\";\n  isMyTurn: boolean;\n  makeHumanMove: (x: number, y: number, opponent: Player) => void;\n  makeComputerMove: (opponent: Player) => void;\n  makeRandomMove: (opponent: Player) => void;\n  toggleTurn: () => void;\n  isHardDifficulty: boolean;\n}\n\nexport function createPlayer(\n  isHuman: boolean,\n  isHardDifficulty: boolean\n): Player {\n  return {\n    isHuman: isHuman,\n    gameboard: createGameboard(10),\n    name: isHuman ? \"Player 1\" : \"Player 2\",\n    isMyTurn: isHuman,\n    isHardDifficulty: isHardDifficulty,\n    makeHumanMove: function (x: number = 0, y: number = 0, opponent: Player) {\n      opponent.gameboard.receiveAttack(x, y);\n    },\n\n    toggleTurn: function () {\n      this.isMyTurn = !this.isMyTurn;\n    },\n    makeComputerMove: function (opponent: Player) {\n      if (!this.isHuman) {\n        if (this.isHardDifficulty) {\n          let hitCells = opponent.gameboard.hitCells;\n          if (hitCells.length > 0) {\n            let adjacentMoveModifiers: number[][] = [\n              [0, 1],\n              [1, 0],\n              [-1, 0],\n              [0, -1],\n            ];\n\n            let shuffleArray = function (array: any[]) {\n              for (let i = array.length - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [array[i], array[j]] = [array[j], array[i]];\n              }\n            };\n\n            shuffleArray(adjacentMoveModifiers);\n\n            let lastHitCell = hitCells[hitCells.length - 1];\n            let validMoveFound = false;\n            while (!validMoveFound && adjacentMoveModifiers.length > 0) {\n              let modifier = adjacentMoveModifiers.pop();\n              if (modifier) {\n                let x = lastHitCell[0] + modifier[0];\n                let y = lastHitCell[1] + modifier[1];\n                if (\n                  x >= 0 &&\n                  x < opponent.gameboard.size &&\n                  y >= 0 &&\n                  y < opponent.gameboard.size &&\n                  !opponent.gameboard.missedAttacks.some(\n                    (shot) => shot[0] === x && shot[1] === y\n                  ) &&\n                  !opponent.gameboard.hitCells.some(\n                    (hit) => hit[0] === x && hit[1] === y\n                  )\n                ) {\n                  opponent.gameboard.receiveAttack(x, y);\n                  validMoveFound = true;\n                }\n              }\n            }\n            if (!validMoveFound) {\n              this.makeRandomMove(opponent);\n            }\n          } else {\n            this.makeRandomMove(opponent);\n          }\n        } else {\n          this.makeRandomMove(opponent);\n        }\n        alert(\"Computer has made an attack\");\n      }\n    },\n    makeRandomMove: function (opponent: Player) {\n      let validRandomMove = false;\n      let x: number = 0;\n      let y: number = 0;\n      while (!validRandomMove) {\n        x = Math.floor(Math.random() * opponent.gameboard.size);\n        y = Math.floor(Math.random() * opponent.gameboard.size);\n\n        const missedShots = opponent.gameboard.getMissedShots();\n        const hitCells = opponent.gameboard.getHitCells();\n        if (\n          !missedShots.some((shot) => shot[0] === x && shot[1] == y) &&\n          !hitCells.some((cell) => cell[0] === x && cell[1] === y)\n        ) {\n          validRandomMove = true;\n        }\n      }\n      opponent.gameboard.receiveAttack(x, y);\n    },\n  };\n}\n","import { createGameboard } from \"../src/gameboard\";\nimport { createPlayer, Player } from \"../src/player\";\n\nexport interface Gameloop {\n  gameStarted: boolean;\n  setDifficulty: (isHardDifficulty: boolean) => void;\n  isGameStarted: () => boolean;\n  startGame: () => void;\n  humanPlayer: Player;\n  compPlayer: Player;\n  manageTurns: (x?: number, y?: number) => void;\n  checkEndOfGame: () => void;\n  gameOver: boolean;\n}\n\nexport function createGameLoop(isHardDifficulty: boolean): Gameloop {\n  let gameLoop: Gameloop = {\n    gameStarted: false,\n    setDifficulty: function (isHardDifficulty: boolean) {\n      this.humanPlayer.isHardDifficulty = isHardDifficulty;\n      this.compPlayer.isHardDifficulty = isHardDifficulty;\n    },\n    isGameStarted: function () {\n      return this.gameStarted;\n    },\n    humanPlayer: createPlayer(true, isHardDifficulty),\n    compPlayer: createPlayer(false, isHardDifficulty),\n    startGame: function () {\n      this.gameStarted = true;\n      this.humanPlayer.gameboard = createGameboard(10);\n      this.humanPlayer.gameboard.createAllShips();\n\n      this.compPlayer.gameboard = createGameboard(10);\n      this.compPlayer.gameboard.createAllShips();\n      this.manageTurns();\n    },\n    manageTurns: function (x?: number, y?: number) {\n      if (this.gameOver) {\n        return;\n      }\n      if (this.humanPlayer.isMyTurn) {\n        if (x !== undefined && y !== undefined) {\n          this.humanPlayer.makeHumanMove(x, y, this.compPlayer);\n          this.checkEndOfGame();\n          if (!this.gameOver) {\n            this.humanPlayer.toggleTurn();\n            this.compPlayer.toggleTurn();\n\n            if (this.compPlayer.isMyTurn) {\n              this.compPlayer.makeComputerMove(this.humanPlayer);\n              this.checkEndOfGame();\n              if (!this.gameOver) {\n                this.humanPlayer.toggleTurn();\n                this.compPlayer.toggleTurn();\n              }\n            }\n          }\n        }\n      }\n    },\n    checkEndOfGame: function () {\n      if (this.compPlayer.gameboard.allShipsSunk()) {\n        alert(\"Congratulations! You have won!\");\n        this.gameOver = true;\n      } else if (this.humanPlayer.gameboard.allShipsSunk()) {\n        alert(\"Game Over, you lost...\");\n        this.gameOver = true;\n      }\n    },\n    gameOver: false,\n  };\n  return gameLoop;\n}\n","import { createGameLoop } from \"../src/gameLoop\";\nimport { Gameboard } from \"./gameboard\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const introduction = document.querySelector(\".introduction\") as HTMLElement;\n  const closeButton = document.querySelector(\"#closeButton\");\n  const startGameBtn = document.querySelector(\"#startBtn\");\n  const difficultySelector = document.querySelector(\n    \"#difficulty\"\n  ) as HTMLSelectElement;\n  const opponentBoard = document.querySelector(\".opponentBoard\");\n  const playersBoard = document.querySelector(\".playersBoard\");\n\n  let gameLoop = createGameLoop(false);\n\n  if (introduction && closeButton) {\n    introduction.style.display = \"flex\";\n    closeButton.addEventListener(\"click\", () => {\n      introduction.style.display = \"none\";\n    });\n  }\n\n  if (opponentBoard instanceof HTMLElement) {\n    createGrid(gameLoop.humanPlayer.gameboard, opponentBoard, \"opponentBoard\");\n  } else {\n    console.error(\"Opponent board not found\");\n  }\n  if (playersBoard instanceof HTMLElement) {\n    createGrid(gameLoop.humanPlayer.gameboard, playersBoard, \"playersBoard\");\n  } else {\n    console.error(\"Players board not found\");\n  }\n\n  if (startGameBtn && difficultySelector) {\n    startGameBtn.addEventListener(\"click\", () => {\n      difficultySelector.disabled = true;\n      let isHardDifficulty = difficultySelector.value === \"Hard\";\n      gameLoop = createGameLoop(isHardDifficulty);\n      gameLoop.startGame();\n\n      if (opponentBoard instanceof HTMLElement) {\n        createGrid(\n          gameLoop.humanPlayer.gameboard,\n          opponentBoard,\n          \"opponentBoard\"\n        );\n      } else {\n        console.error(\"Opponent board not found\");\n      }\n      if (playersBoard instanceof HTMLElement) {\n        createGrid(\n          gameLoop.humanPlayer.gameboard,\n          playersBoard,\n          \"playersBoard\"\n        );\n      } else {\n        console.error(\"Players board not found\");\n      }\n\n      gameLoop.manageTurns();\n    });\n  } else {\n    console.error(\"Start Game button or difficulty selector not found\");\n  }\n\n  function createGrid(\n    gameboard: Gameboard,\n    htmlGrid: HTMLElement,\n    boardClass: string\n  ) {\n    htmlGrid.innerHTML = \"\";\n    htmlGrid.style.gridTemplateColumns = `repeat(${gameboard.size}, 1fr)`;\n    htmlGrid.style.gridTemplateRows = `repeat(${gameboard.size}, 1fr)`;\n    const root = document.documentElement;\n    root.style.setProperty(\"--num\", gameboard.size.toString());\n    for (let i = 0; i < gameboard.size; i++) {\n      for (let j = 0; j < gameboard.size; j++) {\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"cell\");\n        cell.dataset.x = i.toString();\n        cell.dataset.y = j.toString();\n        if (boardClass === \"opponentBoard\") {\n          cell.addEventListener(\"click\", (event) => {\n            const target = event.target as HTMLElement;\n            if (target.dataset.x && target.dataset.y) {\n              const x = parseInt(target.dataset.x, 10);\n              const y = parseInt(target.dataset.y, 10);\n              gameLoop.manageTurns(x, y);\n              updateMoveLists();\n            } else {\n              console.error(\"Data attributes x and y are not set\");\n            }\n          });\n        }\n        htmlGrid.appendChild(cell);\n      }\n    }\n    if (boardClass === \"playersBoard\") {\n      updateShipCells(\"playersBoard\", gameLoop.humanPlayer.gameboard);\n    }\n  }\n\n  function updateElementTextContent(elementId: string, moves: number[][]) {\n    const element = document.getElementById(elementId);\n    if (element) {\n      element.textContent = moves\n        .map((move) => `(${move[0]}, ${move[1]})`)\n        .join(\", \");\n    }\n  }\n\n  function updateShipCells(boardClass: string, gameboard: Gameboard) {\n    for (let x = 0; x < gameboard.size; x++) {\n      for (let y = 0; y < gameboard.size; y++) {\n        if (gameboard.grid[x][y].ship !== null) {\n          const cell = document.querySelector(\n            `.${boardClass} .cell[data-x=\"${x}\"][data-y=\"${y}\"]`\n          );\n          if (cell) {\n            cell.classList.add(\"ship\");\n          }\n        }\n      }\n    }\n  }\n\n  function updateCellClasses(\n    boardClass: string,\n    moves: number[][],\n    className: string\n  ) {\n    moves.forEach((move) => {\n      const cell = document.querySelector(\n        `.${boardClass} .cell[data-x='${move[0]}'][data-y='${move[1]}']`\n      );\n      if (cell) {\n        cell.classList.add(className);\n      }\n    });\n  }\n\n  function updateMoveLists() {\n    updateElementTextContent(\n      \"humanMissedAttacks\",\n      gameLoop.humanPlayer.gameboard.missedAttacks\n    );\n    updateElementTextContent(\n      \"computerMissedAttacks\",\n      gameLoop.compPlayer.gameboard.missedAttacks\n    );\n    updateElementTextContent(\n      \"humanHitCells\",\n      gameLoop.humanPlayer.gameboard.getHitCells()\n    );\n    updateElementTextContent(\n      \"computerHitCells\",\n      gameLoop.compPlayer.gameboard.getHitCells()\n    );\n\n    updateCellClasses(\n      \"opponentBoard\",\n      gameLoop.compPlayer.gameboard.missedAttacks,\n      \"missedAttacks\"\n    );\n    updateCellClasses(\n      \"playersBoard\",\n      gameLoop.humanPlayer.gameboard.missedAttacks,\n      \"missedAttacks\"\n    );\n    updateCellClasses(\n      \"opponentBoard\",\n      gameLoop.compPlayer.gameboard.getHitCells(),\n      \"hits\"\n    );\n    updateCellClasses(\n      \"playersBoard\",\n      gameLoop.humanPlayer.gameboard.getHitCells(),\n      \"hits\"\n    );\n  }\n});\n"]}