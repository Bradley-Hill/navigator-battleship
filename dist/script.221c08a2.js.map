{"version":3,"sources":["ship.ts","gameboard.ts","player.ts","gameLoop.ts","script.ts"],"names":[],"mappings":";;;;;AIAA,IAAA,UAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;ADAA,AFAA,ACAA,AEGA,AJMA,IGTA,AFAA,ACAA,IEGQ,CAAC,AJMO,CCThB,GAAA,EEAA,ADAA,GCAA,ADAA,CFS0B,CCT1B,ADS2B,CCT3B,GDSuC,CGTvC,ADAA,AEGyB,CDHzB,ADAA,AEG0B,AJMa,QCTvC,CAAA,SEAA,ADAA,AEG4C,CDH5C,ADAA,CEG8C,YAAA;ADF9C,AFuBA,ACZA,EERE,AJMA,EGTF,ECGQ,GHoBQ,ACZA,AFFP,GGTT,GAAA,GCGoB,GFQQ,AERL,CDHvB,ADW6B,CCX7B,CFuB+B,CAAC,IAAY,ACZC,AERd,CAAC,CHoBY,ACZC,OCX7C,CAAA,ICG6C,CAAC,WAAW,CAAC;ADQ1D,EFaE,ACZA,AERA,EJME,ECcE,AGpBE,GDOQ,ADCP,CFFC,EAAE,GCcG,CDdC,ECca,CGpBR,GAAG,CDOM,CAAA,EAAA,ICPE,CAAC,aAAa,CAAC,gBAAgB,CAAC;EDQ9D,ACPA,EHoBE,ACZA,AFFA,EGCE,ACPE,EHoBA,EAAE,CCZC,AFFA,EEEE,AFFA,CGCC,AFaA,ADdA,GGCa,CCPP,EFQA,CERG,QAAQ,CAAC,aAAa,CAAC,eAAe,CAAC;EAE5D,EDME,AFaA,ACZA,AFFA,EILE,EHmBE,ADdA,ECcE,ADdA,GEEG,ECDE,AFaA,ACZA,AFFA,CCcC,ACZD,CCDE,ADCF,CCDE,ACNC,CDMD,ADCF,CDYK,AGnBA,CDMH,AFaI,QEbJ,CAAA,ADCF,CAAA,WCDc,EAAC,EDCA,ECDI,ADCH,CCDI,CDCF,CAAC;ICA9B,ADCA,AEPA,AJKA,ECamB,ECXf,EAAE,EDWmB,ADbjB,EGCE,AFYiB,ADbjB,EGCE,ACNA,CDMA,ADCC,AEPA,CDMD,AHDE,EGCF,ADCI,QCDJ,CAAA,CDCc,GAAG,AEPA,CAAC,ODMN,ACNa,EDMZ,ADCc,AEPA,KDMT,CAAC,MCNQ;IDOvC,AFW+B,ACV/B,AFFA,CCYiC,CGjB/B,CHiBiC,ADZhC,EAAA,CILK,EFOA,CCDC,CDCC,CCDC,GCNK,AJKb,CCYgC,ECVlB,AEPE,CAAA,AJKhB,CILgB,CDMR,AHDR,CILgB,SDMR,CCNQ,CDMR,ACNQ,cAAc,EAAA,CAAE;IFQnC,ECDE,AFWA,AGjBA,AJKA,IGCI,AHDA,CGCC,AHDA,ECYL,CGjBQ,CAAC,EFOE,CDUN,ADZO,CCYN,ACVO,CFFC,EGCE,CAAC,AFWP,CAAC,AGjBO,CAAA,CAAE,EFOP,ICDa,GAAG,CAAA,CAAA,EAAA,GDCN,CAAa,EAAE,CAAa,EAAE,ECDxB,CAAA,KDCwC,EAAA,QCDzB,EAAC,EAAE,CAAC;IHAlD,CAAC,CGCC,ADAuB,AENvB,EHgBa,EEVT,ADAmB,AENnB,CDMC,ADAkB,GDUJ,EAAE,ACVE,KAAA,CCAP,ADAO,CCAN,ACNA,CFMM,QCAG,CAAC,ECNE,SDMS,CAAC,CAAC,ACNA,EDME,ACNA,CDMC,EAAE,CAAC,EAAE,YAAY,CAAC;IHA/D,EGCE,AFSyB,CAAE,CCVJ,AELrB,CHe2B,ACVN,CCCnB,AHDA,CGCC,CDDkB,AFAnB,CEAgC,KELxB,CAAC,EHegB,ADVzB,CGCY,CAAC,ICNI,CAAC,AJKlB,EAAA,EGCsB,CAAC,MCNM,CAAC,IDMI,CAAC,CAAC,EAAE,CAAC,ACNA,EDME,ACNA,CDMC,EAAE,UCNU,CAAC,CDMC,CAAC;MAC7D,ADFoC,AEJpC,AJKA,CILC,CHckC,EER/B,AHDA,CGCC,ECNE,CJKC,CCS4B,ADT3B,OGCO,AHDA,CGCC,GHDG,IAAI,CAAC,CGCC,CAAC,IHDI,EAAE,KGCK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;MAE7D,ADJsC,EEHpC,AJKA,EGEE,AFOF,ACXoC,CCIjC,ADJiC,CFEhC,CAAC,EILE,CFG6B,AEH5B,CJKC,CCSD,EAAE,ADTE,CGEC,ADJuB,AEHvB,CDOC,ADJsB,AEHtB,EFGsB,AFEpB,CCSD,MEPQ,GAAG,CAAA,CAAA,EAAA,UCPc,CDOd,ACPe,CDOf,eAAe,EAAC,EAAE,CAAC;MAC/C,ACPA,AJKA,EEHsC,CAAA,CCKlC,AFOF,CEPG,CDLiC,CDYjC,ACZ8C,EDY5C,KAAK,CEPG,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;IHD9D,EGEE,ADNmD,AEDnD,IDOI,AFOF,AGdE,CDOC,GFOC,EAAE,KEPO,CAAC,ACPA,SDOS,CAAC,ECPE,SDOS,CAAC,CAAC,ACPA,EDOE,ACPA,CDOC,EAAE,CAAC,EAAE,YAAY,CAAC;GHD/D,GGEG,ADNA,EEDE,CHcD,CEPG,ADNA,CCMC,GDNG,CAAC,GEDG,CAAC,EDOE,CAAC,ADNA,EAAE,GEDG,CAAC,GDOG,CAAC,OCPO,CAAC,GDOG,CAAC,CAAC,EAAE,CAAC,CCPC,CDOC,CAAC,ACPA,EDOE,UCPU,CAAC,CDOC,CAAC;AHDlE,MGGM,AFCmC,AGTnC,CHaE,AGbD,CHaE,ACZD,KCOK,ACRA,CDQC,EDPE,CAAC,CCOC,CAAC,ODPO,CCOC,ADPA,ECOE,WDPW,CAAC,CAAC,EAAE,CAAC,CAAC;AFX9C,ICmBM,CAIG,CACJ,ACZC,CFZN,CGmBQ,ACRA,AJXR,IGmBY,CAAC,ECRE,CAAC,EJXhB,GIWqB,AJXrB,CIWsB,EDQE,CAAA,CAAE,KHnB1B,gBIW+C,CAAC;IHc5C,ACZA,CAAC,CEDC,EDQE,IAAI,CAAC,EFKE,EAAA,SAAA,CELY,CAAA,CAAE,SFMvB,UAAkB,EAClB,UAAkB,EAClB,QAAgB,EAChB,WAAsC,EAAA;ICdxC,AEFA,CAAC,CDQC,AFUA,AGlBA,IHkBI,IAAI,GAAG,CAAA,CAAA,CChBG,CDgBH,CChBK,KDgBL,CAAA,GChBK,ODgBK,EAAC,QAAQ,AChBJ,CDgBK,OChBW,EAAA;EED9C,CAAC,CDQC,CAAC,CFUC,AChBA,GEFG,CHkBC,AChBA,CDgBC,AChBA,IAAI,CAAC,GDgBG,GAAG,CChBC,CDgBC,CChBC;ICOrB,ACRA,EHmBE,ECjBE,GDiBG,AGnBA,CFEC,AEFA,GDQG,AFWA,CAAC,CEXC,ACRA,CAAC,CHmBC,CAAC,CCjBC,CDiBC,CAAC,CCjBC,ECMP,AFWS,GCjBG,KDiBK,EAAE,CAAC,CEXpB,CFWsB,CEXtB,CFWwB,MGnBM,CAAC;EAC9C,IDQI,EFWE,ACjBA,ECME,EFWE,ACjBA,CDiBC,CEXC,CAAC,ADNF,CDiBG,ECjBQ,CAAC,OCMC,AFWA,CEXC,GFWG,KEXK,EAAE,IFWI,KAAK,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;EGjBjE,MDOM,AFWA,ACjBA,GEDG,CDOC,AFWA,ACjBA,CCMC,AFWA,ECjBA,CDiBG,ECjBQ,CAAC,EEDJ,CAAC,EDOE,CAAC,CFWC,IAAI,CGlBY,EAAE,KDON,CAC5B,CAAC,CFU8B,AGlBwB,CDSvD,CAAC,ACTsD,EDUvD,CFQoC,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,yBERT,IAAI,CAAC,UAAU,CAC9D;ICVL,EDWE,CAAC,CFQC,AClBA,IDkBI,AGnBA,CDWC,AFQA,AGnBA,EFCE,CAAC,CDkBC,IAAI,CGnBC,GHmBG,AClBA,AEDA,CHmBC,CClBC,AEDA,GHmBG,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;IGlBjE,IDWI,EFQE,AClBA,ECUE,ACXA,CDWC,ADVF,AEDE,GFCC,CDkBG,CGnBC,CAAC,CFCD,CDkBG,AClBF,ECUI,CAAC,EDVA,CAAC,IAAI,CAAC,MAAM,AEDE,CFCF,CCUI,ADVF,CCUG,ACXA,EFCA,ECUI,CAAC,ICXL,CFCQ,AEDR,CFCS,KCUO,ACXhB,CDWiB,ACXP,GFCQ,CAAC,IAAI,CAAC,AEDL,CAAC,IAAI,EAAA,QAAA,CAAQ;IACrE,EDWE,EFQE,EClBE,EEDE,CFCD,AEDE,GFCC,EEDI,CAAC,CFCD,CAAC,KAAK,CAAC,IAAI,CAAC,GEDK,GFCC,AEDE,CFCF,CAAE,GAAG,IEDH,CAAA,GFCW,CAAC,EEDZ,CAAU,MFCW,CAAC,EEDH,CAAC,CFCM,CAAC,EEDH,EAAA,QAAA,CAAQ;IAClE,EDYE,EFOE,AGnBE,EDYA,ADVA,CCUC,CFOC,AGnBE,CHmBD,CCjBG,CEFC,MHmBI,CEPC,AFOA,CEPC,ACZE,CAAC,CFEC,CDiBD,CAAC,CAAC,ACjBE,CDiBD,EAAE,CAAC,CEPC,AFOA,CEPA,AFOC,CEPC,CDVG,CAAC,EEFE,OFEO,CAAC,cAAc,CAAA,CAAE;IED7D,EDYE,EFOE,AGnBA,CAAC,CDYC,ADVA,CCUC,GDVK,AEFF,CAAC,EHmBE,CAAC,GEPG,CAAC,AFOA,ACjBE,CDiBD,CAAC,CAAC,ACjBE,CDiBD,AGnBA,CHmBC,AGnBA,CHmBC,CAAC,GEPG,CAAA,AFOC,ACjBE,CCUD,ADVE,AEFF,EHmBE,AGnBA,IHmBI,GCjBK,CAAC,CEFD,CAAC,IAAI,CAAC,IFEM,CAAA,CAAE,EEFA,CAAA,CAAE,CAAC;IDa1D,ACZA,CDYC,GFOG,CGnBC,CFEC,GEFG,CFGD,AEHE,CFGD,EDgBI,AGnBA,CHmBC,AGnBA,EAAE,CAAC,CHmBC,CAAC,CAAC,AGnBA,CHmBC,CAAC,AChBF,CDgBG,AChBF,CDgBG,CAAC,EChBA,CAAC,CEHG,CAAC,GHmBG,CGnBC,EHmBE,AGnBA,CAAC,CFGV,CEHY,CHmBC,CGnBC,CFGV,EAAA;ICU/B,EFOE,AGnBA,KAAK,CFE6B,GEFzB,CAAC,EDYE,CDVsB,AEFrB,CDYC,ACZA,EAAE,CFEsB,AEFrB,CFEsB,CAAC,CAAC,AEFrB,GDYN,EDVgC,GAAC,CEFlB,CAAC,EFEqB,EEFjB,EFEqB,AEFnB,CFEoB,AEFnB,CDYvB,ADV2C,CAAC,AEFnB,CDYzB,CCZ2B,EFEqB,GAAC;MCW/D,AFOA,EGnBE,EDYE,ADX8B,CAA6B,CAAC,AEDxD,CHmBD,CEPC,CAAC,CDVH,AEFM,CHmBD,ACjBJ,EEFQ,MDYI,ADVJ,CCUK,ADVJ,CEFO,CAAC,EFEJ,CAAC,ICUQ,CAAC,KDVR,AEFe,CAAC,GFEZ,EAAA,AEFiB,CDYD,ACZE,CDYF,CAAE,EAAE;IFQhD,CAAC,GEPG,ACZA,IFC6B,AEDzB,CAAC,EDYE,CAAC,GAAG,ADXkB,CCWjB,ECZE,CFCmB,AEDlB,CFCmB,CAAC,CAAC,AEDlB,CAAC,IFCsB,EEDhB,CFCiB,AEDhB,IFCoB,IAAI,CAAC,CAAC,CAAC,KAAK,ECWd,CAAC,ADXc;IDmB/D,IEPI,ACZA,EFA6B,CAA8B,CCYvD,ADZwD,CCYvD,CDXD,EEDI,CHmBC,AGnBA,EHmBA,EEPI,GAAG,IAAI,AFOX,AGnBW,CAAC,IAAI,CAAC,QHmBhB,UAAkB,EAAE,UAAkB,EAAA;MENlD,ACZA,CDYC,KDXK,CCWC,IAAI,IAAI,ADXA,C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","file":"script.221c08a2.js","sourceRoot":"../src","sourcesContent":["export interface Ship {\n  length: number;\n  impacts: number;\n  sunk: boolean;\n  position: [number, number][] | null;\n  hit(): void;\n  isSunk(): void;\n}\n\nexport function createShip(size: number): Ship {\n  return {\n    length: size,\n    impacts: 0,\n    sunk: false,\n    position: null,\n    hit() {\n      this.impacts++;\n    },\n    isSunk() {\n      if (this.impacts >= this.length) {\n        this.sunk = true;\n      }\n    },\n  };\n}\n","import { createShip, Ship } from \"../src/ship\";\n\nexport type Cell = {\n  occupied: boolean;\n  hit: boolean;\n  ship: Ship | null;\n};\n\nexport interface Gameboard {\n  size: number;\n  grid: Cell[][];\n  createShips(\n    gameboardX: number,\n    gameboardY: number,\n    shipSize: number,\n    orientation: \"horizontal\" | \"vertical\"\n  ): Ship | null;\n  receiveAttack(gameboardX: number, gameboardY: number): void;\n  missedAttacks: [number, number][];\n  allShipsSunk(): boolean;\n  getMissedShots: () => number[][];\n  getHitCells: () => number[][];\n}\n\nexport function createGameboard(size: number): Gameboard {\n  let gameboard: Gameboard = {\n    size: size,\n    grid: Array.from({ length: size }, () =>\n      Array.from({ length: size }, () => ({\n        occupied: false,\n        hit: false,\n        ship: null,\n      }))\n    ),\n    createShips(\n      gameboardX: number,\n      gameboardY: number,\n      shipSize: number,\n      orientation: \"horizontal\" | \"vertical\"\n    ): Ship | null {\n      let ship = createShip(shipSize);\n      ship.position = [];\n\n      for (let i = 0; i < shipSize; i++) {\n        let x = gameboardX + (orientation === \"horizontal\" ? i : 0);\n        let y = gameboardY + (orientation === \"vertical\" ? i : 0);\n\n        if (x >= size || y >= size || gameboard.grid[x][y].occupied) {\n          return null;\n        }\n        ship.position.push([x, y]);\n        gameboard.grid[x][y].ship = ship;\n        gameboard.grid[x][y].occupied = true;\n      }\n      return ship;\n    },\n    receiveAttack(gameboardX: number, gameboardY: number): void {\n      if (gameboard.grid[gameboardX][gameboardY].occupied) {\n        gameboard.grid[gameboardX][gameboardY].hit = true;\n        gameboard.grid[gameboardX][gameboardY].ship?.hit();\n      } else {\n        gameboard.missedAttacks.push([gameboardX, gameboardY]);\n      }\n    },\n    missedAttacks: [],\n    allShipsSunk() {\n      for (let i = 0; i < this.grid.length; i++) {\n        for (let j = 0; j < this.grid.length; j++) {\n          if (this.grid[i][j].occupied) {\n            this.grid[i][j].ship?.isSunk();\n            if (!this.grid[i][j].ship?.sunk) {\n              return false;\n            } else {\n              continue;\n            }\n          }\n        }\n      }\n      return true;\n    },\n    getMissedShots: function () {\n      return this.missedAttacks;\n    },\n    getHitCells: function () {\n      const hitCells: number[][] = [];\n      for (let i = 0; i < this.size; i++) {\n        for (let j = 0; j < this.size; j++) {\n          if (this.grid[i][j].hit) {\n            hitCells.push([i, j]);\n          }\n        }\n      }\n      return hitCells;\n    },\n  };\n  return gameboard;\n}\n","import { createGameboard, Gameboard } from \"../src/gameboard\";\n\nexport interface Player {\n  isHuman: boolean;\n  gameboard: Gameboard;\n  name: \"Player 1\" | \"Player 2\";\n  isMyTurn: boolean;\n  makeHumanMove: (x: number, y: number, opponent: Player) => void;\n  makeComputerMove: (opponent: Player) => void;\n  toggleTurn: () => void;\n}\n\nexport function createPlayer(isHuman: boolean): Player {\n  return {\n    isHuman: isHuman,\n    gameboard: createGameboard(10),\n    name: isHuman ? \"Player 1\" : \"Player 2\",\n    isMyTurn: isHuman,\n    makeHumanMove: function (x: number = 0, y: number = 0, opponent: Player) {\n      if (this.isHuman) {\n        opponent.gameboard.receiveAttack(x, y);\n      }\n    },\n\n    makeComputerMove: function (opponent: Player) {\n      if (!this.isHuman) {\n        let validMove = false;\n        let x: number = 0;\n        let y: number = 0;\n        while (!validMove) {\n          x = Math.floor(Math.random() * opponent.gameboard.size);\n          y = Math.floor(Math.random() * opponent.gameboard.size);\n\n          const missedShots = opponent.gameboard.getMissedShots();\n          const hitCells = opponent.gameboard.getHitCells();\n          if (\n            !missedShots.some((shot) => shot[0] === x && shot[1] == y) &&\n            !hitCells.some((cell) => cell[0] === x && cell[1] === y)\n          ) {\n            validMove = true;\n          }\n        }\n        opponent.gameboard.receiveAttack(x, y);\n      }\n    },\n    toggleTurn: function () {\n      this.isMyTurn = !this.isMyTurn;\n    },\n  };\n}\n","import { createGameboard } from \"../src/gameboard\";\nimport { createPlayer, Player } from \"../src/player\";\n\nexport interface Gameloop {\n  startGame: () => void;\n  humanPlayer: Player;\n  compPlayer: Player;\n  manageTurns: () => void;\n  checkEndOfGame: () => void;\n  gameOver: boolean;\n}\n\nexport function createGameLoop(): Gameloop {\n  let gameLoop: Gameloop = {\n    humanPlayer: createPlayer(true),\n    compPlayer: createPlayer(false),\n    startGame: function () {\n      this.humanPlayer.gameboard = createGameboard(10);\n      this.humanPlayer.gameboard.createShips(0, 0, 1, \"horizontal\");\n      this.humanPlayer.gameboard.createShips(0, 1, 1, \"horizontal\");\n      this.humanPlayer.gameboard.createShips(0, 2, 1, \"horizontal\");\n\n      this.compPlayer.gameboard = createGameboard(10);\n      this.compPlayer.gameboard.createShips(0, 0, 1, \"horizontal\");\n      this.compPlayer.gameboard.createShips(0, 1, 1, \"horizontal\");\n      this.compPlayer.gameboard.createShips(0, 2, 1, \"horizontal\");\n\n      while (!this.gameOver) {\n        this.manageTurns();\n        this.checkEndOfGame();\n      }\n    },\n    manageTurns: function () {\n      if (this.humanPlayer.isMyTurn) {\n        this.humanPlayer.makeHumanMove(\n          0,\n          0,\n          /* Take co-ordinates from DOM manipulation */ this.compPlayer\n        );\n      } else {\n        this.compPlayer.makeComputerMove(this.humanPlayer);\n      }\n\n      this.humanPlayer.toggleTurn();\n      this.compPlayer.toggleTurn();\n    },\n    checkEndOfGame: function () {\n      if (this.compPlayer.gameboard.allShipsSunk()) {\n        console.log(\"Congratulations! You have won!\");\n        this.gameOver = true;\n      } else if (this.humanPlayer.gameboard.allShipsSunk()) {\n        console.log(\"Game Over, you lost...\");\n        this.gameOver = true;\n      }\n    },\n    gameOver: false,\n  };\n  return gameLoop;\n}\n","import { createGameLoop } from \"../src/gameLoop\";\nimport { Gameboard } from \"./gameboard\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const startGameBtn = document.querySelector(\"#startBtn\");\n  const opponentBoard = document.querySelector(\".opponentBoard\");\n  const playersBoard = document.querySelector(\".playersBoard\");\n\n  if (startGameBtn) {\n    startGameBtn.addEventListener(\"click\", () => {\n      const gameLoop = createGameLoop();\n      gameLoop.startGame();\n      if (opponentBoard instanceof HTMLElement) {\n        createGrid(gameLoop.humanPlayer.gameboard, opponentBoard);\n      } else {\n        console.error(\"Opponent board not found\");\n      }\n      if (playersBoard instanceof HTMLElement) {\n        createGrid(gameLoop.humanPlayer.gameboard, playersBoard);\n      } else {\n        console.error(\"Players board not found\");\n      }\n    });\n  } else {\n    console.error(\"Start Game button not found\");\n  }\n\n  function createGrid(gameboard: Gameboard, htmlGrid: HTMLElement) {\n    htmlGrid.innerHTML = \"\";\n    htmlGrid.style.gridTemplateColumns = `repeat(${gameboard.size}, 1fr)`;\n    htmlGrid.style.gridTemplateRows = `repeat(${gameboard.size}, 1fr)`;\n    const root = document.documentElement;\n    root.style.setProperty(\"--num\", gameboard.size.toString());\n    for (let i = 0; i < gameboard.size; i++) {\n      for (let j = 0; j < gameboard.size; j++) {\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"cell\");\n        htmlGrid.appendChild(cell);\n      }\n    }\n  }\n});\n"]}