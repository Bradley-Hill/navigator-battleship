{"version":3,"sources":["ship.ts","gameboard.ts","player.ts","gameLoop.ts","script.ts"],"names":[],"mappings":";;;;;AIAA,IAAA,UAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;ADAA,AFAA,ACAA,AEGA,AJMA,IGTA,AFAA,ACAA,IEGQ,CAAC,AJMO,CCThB,GAAA,EEAA,ADAA,GCAA,ADAA,CFS0B,CCT1B,ADS2B,CCT3B,GDSuC,CGTvC,ADAA,AEGyB,CDHzB,ADAA,AEG0B,AJMa,QCTvC,CAAA,SEAA,ADAA,AEG4C,CDH5C,ADAA,CEG8C,YAAA;ADF9C,AFuBA,ACZA,EERE,AJMA,EGTF,ECGQ,GHoBQ,ACZA,AFFP,GGTT,GAAA,GCGoB,GFQQ,AERL,CDHvB,ADW6B,CCX7B,CFuB+B,CAAC,IAAY,ACZC,AERd,CAAC,CHoBY,ACZC,OCX7C,CAAA,ICG6C,CAAC,WAAW,CAAC;ADQ1D,EFaE,ACZA,AERA,EJME,ECcE,AGpBE,GDOQ,ADCP,CFFC,EAAE,GCcG,CDdC,ECca,CGpBR,GAAG,CDOM,CAAA,EAAA,ICPE,CAAC,aAAa,CAAC,gBAAgB,CAAC;EDQ9D,ACPA,EHoBE,ACZA,AFFA,EGCE,ACPE,EHoBA,EAAE,CCZC,AFFA,EEEE,AFFA,CGCC,AFaA,ADdA,GGCa,CCPP,EFQA,CERG,QAAQ,CAAC,aAAa,CAAC,eAAe,CAAC;EAE5D,EDME,AFaA,ACZA,AFFA,EILI,EHmBA,ADdA,ECcE,ADdA,GEEG,CEPG,CDMD,AFaA,ACZA,AFFA,CCcC,ACZD,CCDE,ADCF,AEPI,CDMF,ACNE,CDMF,ADCF,AEPI,CHmBC,CEbH,AFaI,AGnBF,QDMF,CAAA,ADCF,CAAA,AEPI,CAAA,UDMU,EAAC,EDCA,AEPG,EDMC,ADCH,AEPE,CDME,ACNA,CFOF,CAAC;EELhC,EDKE,ADCA,AFFA,ECamB,AGjBjB,EFME,EAAE,EDWmB,ADbjB,EGCE,AFYiB,ADbjB,EGCE,CAAA,ADCC,CCDD,AHDE,CIJC,CDKH,ADCI,QCDJ,CAAA,CDCc,CENC,EFME,QCDL,CCLc,CDKb,ADCc,CENC,IDKV,CAAC;IAC/B,AFW+B,ACV/B,AENA,AJIA,CCYiC,EAAE,ADZhC,EAAA,GEEK,CCDC,CDCC,AENA,CDKC,ACLA,GJIR,CCYgC,ECVlB,CFFd,CIJgB,CDKR,ACLS,AJIjB,UGCQ,CCLoB,CDKpB,ACLqB,SAAS,EAAE,aAAa,CAAC;EAC3D,CAAC,CFMC,ECDE,AFWA,ADZA,GIJG,CDKC,AHDA,CGCC,AHDA,ECYL,ICVW,CDUN,ADZO,CCYN,ACVO,CFFC,EGCE,CAAC,AFWP,CAAC,ICVE,ICDa,GAAG,CAAA,CAAA,EAAA,GDCN,CAAa,EAAE,CAAa,EAAE,ECDxB,CAAA,KDCwC,EAAA,QCDzB,EAAC,EAAE,CAAC;ICJlD,AJIA,CAAC,CGCC,ADAuB,EDUV,EEVT,ADAmB,CCAlB,ADAkB,AELlB,CAAC,EHea,EAAE,ACVE,CELZ,CAAC,GFKW,CCAP,ADAO,CCAN,CDAM,QCAG,CAAC,WAAW,ACLA,CDKC,ACLA,CDKC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;ECJjE,EJIE,EGCE,AFSyB,CAAE,CCVJ,CDUM,ACVN,CCCnB,AHDA,CGCC,CDDkB,AFAnB,CEAgC,QDUP,ADVzB,CGCY,CAAC,KHDb,EAAA,EGCsB,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;ECJjE,IDKI,ADFoC,AEHpC,AJIA,ECSmC,EER/B,AHDA,CGCC,GHDG,CCS4B,ADT3B,GIJG,IDKI,AHDA,CGCC,GHDG,IIJI,AJIA,CAAC,CGCC,CAAC,IHDI,EAAE,EIJE,EAAE,CDKC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;ICJ/D,EDME,ADJsC,EFEpC,EGEE,AFOF,ACXoC,CCIjC,ADJiC,CFEhC,CAAC,CIJC,CAAC,CFE6B,CFE3B,CCSD,EAAE,ADTE,CGEC,ADJuB,CCItB,ADJsB,CEFrB,CFEqB,AEFpB,AJIA,CCSD,MEPQ,GAAG,CAAA,ACNC,CDMD,ACNE,EDMF,OCNW,EAAE,EDMb,CAAA,SCNyB,CAAC,KDMX,EAAC,EAAE,CAAC;ECLnD,CAAC,GDMG,AHFA,EEHsC,CAAA,AEDnC,CDMC,AFOF,CEPG,CDLiC,CDYjC,ACZ8C,EDY5C,KAAK,CEPG,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;ICL9D,AJIA,EGEE,ADNmD,ICM/C,AFOF,CEPG,ACNA,CAAC,EHaA,EAAE,CGbG,CAAC,GDMG,CAAC,SAAS,CAAC,WAAW,ACNA,CDMC,ACNA,CDMC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;ECLhE,CJIC,GGEG,ADNA,GDaC,CEPG,CAAC,EDNE,CAAC,GAAG,CAAC,CAAC,CAAC,CCMC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;AHDlE,EIHE,IDKI,AFEmC,ACRnC,AECA,CHWE,CAAC,EENC,CAAC,EDNE,CAAC,GAAG,CAAC,AECA,CFDC,CAAC,AECA,EDKE,CAAA,CAAE;AHjBxB,IGkBI,AFCE,AGNF,CDKC,AFKI,CACJ,ACZC,CFZN,CAAA,MEYc,CAAC,CECC,CAAC,CJbjB,GAAA,GEYwB,CAAC,MFZzB,EIaiC,CAAC,IFDI,CAAC,CAAC,CECC,CFDC,CAAC,AECA,CFDC,WECD;IDMvC,AFMA,ACZA,CAAC,CECC,QAAQ,CDKC,AFMA,AGXA,EDKE,AFMF,OGXS,CAAA,CDKP,AFMF,AGXW,YDKC,AFOrB,CEP+B,EAAE,CAAU,EAAA,IFOzB,EAClB,UAAkB,EAClB,QAAgB,EAChB,WAAsC,EAAA;ICdxC,AEAA,CAAC,CDIY,AFYX,AGhBA,IDIW,AFYP,IAAI,CEZG,EFYA,CEZA,AFYA,CAAA,CChBG,CDgBH,CEZA,ADJK,KDgBL,CAAA,GChBK,ODgBK,EAAC,QAAQ,AChBJ,CDgBK,OChBW,EAAA;EEC9C,CAAC,GDIG,AFYA,AChBA,GEAG,CDIC,AFYA,AChBA,CDgBC,AChBA,GCIG,CAAC,ADJA,CAAC,GDgBG,GAAG,CEZC,ADJA,CDgBC,CEZC,ADJA;IECrB,EHiBE,EEbE,ADJA,GDiBG,AGjBA,CFAC,AEAA,GHiBG,CAAC,CGjBC,CAAC,CHiBC,CAAC,CCjBC,CDiBC,CAAC,CCjBC,EDiBE,GCjBG,KDiBK,EAAE,CAAC,EAAE,EAAE,MGjBM,CAAC;EAC9C,IDII,EFaE,ACjBA,IDiBI,ACjBA,CDiBC,ECjBA,CDiBG,ECjBQ,CAAC,ODiBC,IAAI,WAAW,KAAK,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;EGfjE,IDGI,EFaE,ACjBA,ECIE,ACHA,CAAC,CHgBC,ACjBA,CDiBC,CEbC,CAAC,ADJF,CDiBG,ECjBQ,CAAC,OCIC,AFaA,CEbC,ACHA,CAAC,EHgBE,KEbK,ACHA,CAAC,CDGC,ACHA,IHgBI,GGhBG,CAAC,CHgBC,SGhBA,CHgBU,GAAG,AGhBT,CHgBU,CGhBV,EHgBa,CAAC,CAAC;IGf7D,IDGI,AFcA,AClBA,AECA,CAAC,GHiBG,CAAC,EEdE,ADJA,CCIC,ADJA,CDkBC,EEdE,CAAC,CFcC,IAAI,AClBA,AECA,CHiBC,AGjBA,CFDC,GDkBG,GGjBG,CHiBC,CGjBC,GHiBG,EEdE,CAAC,ICHL,EHiBW,CAAC,EGjBP,EHiBW,AGjBX,CHiBY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;MGhB/D,EDGE,EFcE,AClBA,AECE,EDGA,CAAC,ADJF,GAAG,AECI,CHiBD,CEdC,CCHG,CFDH,CDkBG,AClBF,GECO,CAAC,CFDH,CCIG,ADJF,ICIM,ADJF,AECmB,CDGhB,ADJF,KCIO,CDJD,CAAA,CAAE,GAAG,GCIK,EAAE,GDJC,CAAC,SAAS,CAAC,IAAI,CAAC;MEE3D,EHiBE,EEdE,ADJA,AECA,GFDC,CCIG,CAAC,CDJD,AECE,CAAC,GFDC,CAAC,GECK,CAAC,CDGC,ADJF,AECE,CDGC,ADJF,GECK,CFDD,CAAC,IECM,CAAC,CFDD,CAAA,CCII,ADJF,CCIG,CAAC,CDJD,CCIG,ACHA,CDGC,ACHA,CAAC,CDGC,CCHC,GDGG,ADJF,CCIG,ADJF,SAAS,CCIG,ADJF,CCIG,GDJC,CAAC;QDmBzD,AGjBA,EDGE,ADHA,EDiBE,AGjBE,CHiBD,AGjBE,CDGD,ADHE,CCGD,CCHG,KHiBG,CAAC,EGjBI,CFAC,AEAA,CHiBD,CAAC,CAAC,ACjBE,CCGD,AFcA,CEdA,CAAE,AFcA,AGjBE,CHiBD,AGjBE,CHiBD,CAAC,ECjBI,CAAC,EEAE,CAAC,CAAC,EAAE,EAAE,CFAC,AEAA,CFAC,cAAc,CAAA,CAAE;QDkBzD,AGjBA,EDGE,ADHA,EEAI,CAAC,CDGD,ADHE,CCGD,CCHG,CHiBD,CAAC,CEdC,CAAC,EFcE,ACjBE,CDiBD,CAAC,AGjBE,CHiBD,ACjBE,AEAA,CHiBD,CAAC,CEdC,AFcA,CAAC,CEdC,CCHG,CAAC,CHiBD,ACjBE,CAAC,EDiBA,GGjBK,CHiBD,AGjBE,CAAC,EFAE,AEAA,CFAC,CEAC,CAAC,SFAS,CAAA,CAAE;QDkBnD,AGjBA,EFAE,ECGE,EDFA,CAAC,CCEG,ACHA,CDGC,AFcA,AGjBA,CHiBC,IAAI,CAAC,CAAC,CAAC,CAAC,AChBF,CDgBG,AChBF,CCEG,AFcA,AGjBA,CDGC,AFcA,AGjBA,CAAC,CFCD,CAAC,AEDE,CAAC,CAAC,GHiBG,EEdE,CAAA,AFcC,CEdC,CDFV,EDgBa,EChBT,EAAA;MDiB7B,EGjBE,IDGI,ADH4B,ICGxB,CAAC,EDHuB,IAAI,AEArB,CFAsB,AEAtB,CFAuB,AEArB,CFAsB,CCGpB,CAAC,GDHwB,GAAC,ICGf,ADHmB,CCGnB,CAAE,EDHqB,CAAC,CAAC,CAAC,IAAI,GAAC;MDkB/D,AGjBA,CAAC,GFDiC,CAA6B,CCIzD,ADJ0D,CDkBzD,AGjBA,GFAD,CDiBK,ACjBJ,KCGS,CAAC,EDHF,CAAC,IAAI,CAAC,ICGJ,MDHK,IAAI,EAAA;IDkB5B,CAAC,GGjBG,IFD6B,ECGR,CCFd,CAAC,GFDqB,ECGR,ACFR,CAAC,CFDmB,CAAC,CAAC,CCGV,ADHW,CCGV,IDHe,GAAC,ICGL,ADHS,CCGT,CAAE,EDHW,CAAC,CAAC,CAAC,KAAK,GAAC,MECR,CAAC;IHkBxD,EGjBE,IFF+B,CAA8B,CCGtC,ADHuC,CCGrB,CDFnC,CCEqC,EFgBhC,CEhBmC,CAAC,AFgBpC,SAAA,cAAC,UAAkB,EAAE,UAAkB,EAAA;IGhBpD,CAAC,CAAC,IDCI,EDFE,SAAS,GAAG,IAAI;EEE1B,CAAC,CAAC,EHgBE,EEfE,EFeE,ACjBA,SDiBS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE;EGdzD,IDAI,CAAC,CFeC,ACjBA,GEEG,EDAE,IFeI,CAAC,GGfG,CHeC,AGfA,CHeC,QGfmB,EHeT,AGfW,CHeV,CAAC,MGf8B,EAAA,EHepB,CAAC,CAAC,GAAG,GAAG,IAAI;IGdrD,IDAI,AFeA,ACjBA,CDiBA,EAAA,CGfI,CAAC,CHeL,CEfO,CAAC,ADFA,CAAC,ECEE,CAAC,ECAE,CHeL,CAAC,CGfO,CFFC,CAAC,AEEA,CHeL,CAAC,UAAU,CAAC,ACjBM,CDiBL,ACjBM,GCEG,ADFF,CCEG,CDFD,GAAC,CAAC,CDiBD,CAAC,CAAC,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,GAAG,CAAA,CAAE;IGdtD,EHeE,ACjBA,CDiBC,CEfC,IAAI,ACAA,CDAC,AFeA,AGfA,KAAK,CAAC,IDAI,CAAC,cCAc,EDAE,CAAC,ACAA,IDAI,CAAC,ICAL,CAAA,MDAgB,ACAhB,CDAiB,ACAP,SAAS,CAAC,IAAI,EAAA,QAAA,CAAQ;IACrE,EFFE,ECEE,AFeA,IEfI,ACAA,CDAC,ADFA,AEEA,CFFC,GDiBG,ACjBA,CDiBC,ACjBA,AEEA,CAAC,QDAQ,CAAA,CAAE,EFeE,CAAC,GGfG,CHeC,CAAC,CAAC,AGfA,EFFE,CAAC,MEEH,CHeU,AGfV,EHeY,IGfZ,CAAU,KHeY,CAAC,CAAC,EGfL,CAAC,IAAI,EAAA,QAAA,CAAQ;IFDlE,AEEA,CFFC,CDiBC,EEfE,ACAE,IDAE,ACAE,CDAD,ECAI,EDAA,CAAC,KCAO,CAAC,EDAA,EAAE,WCAa;IHgBrC,ACjBA,AEEA,CHeC,GGfG,CAAC,CDAC,IAAI,ADFA,AEEA,CDAC,ACAA,CFFC,SAAA,CCEU,ACAA,CDAC,ACAA,OAAO,EFFlB,AEEoB,CDAC,CAAA,ADFrB,CCEuB,MCAM,CAAC,IAAI,CAAC,QAAQ,CAAA,CAAE,CAAC;IHgB1D,AGfA,EFFE,GEEG,CDAC,ADFA,CAAC,EEEE,CDAC,ACAA,CDAC,EFeE,AGfA,CAAC,CHeC,ACjBA,CEEC,CHeC,AGfA,CFFC,CAAC,CEEC,CDAC,CAAC,CDFC,CAAC,KEEK,CAAC,EDAE,ADFA,CCEA,CAAE,ACAA,EAAE,CAAC,EAAE,EAAE;IHgBzC,ACjBA,EEEE,EDAE,GCAG,IAAI,CHeC,AGfA,EHeA,CGfG,CAAC,EAAE,CAAC,GAAG,CHeV,QGfmB,CAAC,IHepB,AGfwB,EHexB,AGf0B,CAAC,EAAE,EAAE;GFD5C,GCEG,ECAE,IAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;AFDlD,ICEI,CAAC,CFcC,EGdE,GHcG,CGdC,CAAC,EHcE,CAAC,GAAG,CAAC,EAAE,AGdA,CHcC,AGdA,GHcG,AGdA,CAAC,GHcG,CAAC,EGdE,CAAC,CHcC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;ACtDjD,ICyCI,GDzCJ,CDuDQ,ACvDR,AEyCQ,IAAI,CHcC,AGdA,IHcI,CEdC,AFcA,EEdE,ADzCpB,AEyCoB,CHcC,AGdA,CHcC,AGdA,CFzCtB,CDuDwB,CAAC,AGdA,CAAC,CAAC,CHcC,CEdR,GFcY,CAAC,ECvDjC,AEyCmC,CAAA,CHcE,AGdA,CHcC,MEdlB,AFcwB,EEdxB,AFc0B,CAAC,EAAE,EAAE;MEb7C,ECAE,EDAE,AFcA,EGdE,CAAC,CDAC,AFcA,CEdC,GFcG,CAAC,CGdC,CAAC,CAAC,CHcC,CAAC,CEdC,AFcA,AGdA,CDAC,AFcA,AGdA,CHcC,AGdA,CHcC,CAAC,CAAC,KEdK,ACAA,CDAC,ACAD,CAAE,CHcC,EAAE,QEdQ,CAAA,CAAE,EAAE;QAC5C,ACAA,IHcI,CAAA,EEdG,AFcH,CEdI,ACAA,CAAC,CHcL,CEdO,CAAC,EFcJ,CAAC,IAAI,CAAC,AGdM,CHcL,AGdM,CHcL,CAAC,CAAC,CAAC,AGdM,CHcL,AGdM,IHcF,MAAA,IAAA,IEdoB,AFcpB,CEdqB,CFcrB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,CAAA,CAAE;MGbpC,EDAE,IAAI,AFcA,CEdC,GFcG,EAAC,CAAA,EEdI,AFcJ,GEdO,AFcP,IEdW,AFcP,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,CAAA,EAAE;IGbzC,EDAE,CAAC,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","file":"script.221c08a2.js","sourceRoot":"../src","sourcesContent":["export interface Ship {\n  length: number;\n  impacts: number;\n  sunk: boolean;\n  position: [number, number][] | null;\n  hit(): void;\n  isSunk(): void;\n}\n\nexport function createShip(size: number): Ship {\n  return {\n    length: size,\n    impacts: 0,\n    sunk: false,\n    position: null,\n    hit() {\n      this.impacts++;\n    },\n    isSunk() {\n      if (this.impacts >= this.length) {\n        this.sunk = true;\n      }\n    },\n  };\n}\n","import { createShip, Ship } from \"../src/ship\";\n\nexport type Cell = {\n  occupied: boolean;\n  hit: boolean;\n  ship: Ship | null;\n};\n\nexport interface Gameboard {\n  size: number;\n  grid: Cell[][];\n  createShips(\n    gameboardX: number,\n    gameboardY: number,\n    shipSize: number,\n    orientation: \"horizontal\" | \"vertical\"\n  ): Ship | null;\n  receiveAttack(gameboardX: number, gameboardY: number): void;\n  missedAttacks: [number, number][];\n  allShipsSunk(): boolean;\n  getMissedShots: () => number[][];\n  getHitCells: () => number[][];\n}\n\nexport function createGameboard(size: number): Gameboard {\n  let gameboard: Gameboard = {\n    size: size,\n    grid: Array.from({ length: size }, () =>\n      Array.from({ length: size }, () => ({\n        occupied: false,\n        hit: false,\n        ship: null,\n      }))\n    ),\n    createShips(\n      gameboardX: number,\n      gameboardY: number,\n      shipSize: number,\n      orientation: \"horizontal\" | \"vertical\"\n    ): Ship | null {\n      let ship = createShip(shipSize);\n      ship.position = [];\n\n      for (let i = 0; i < shipSize; i++) {\n        let x = gameboardX + (orientation === \"horizontal\" ? i : 0);\n        let y = gameboardY + (orientation === \"vertical\" ? i : 0);\n\n        if (x >= size || y >= size || gameboard.grid[x][y].occupied) {\n          return null;\n        }\n        ship.position.push([x, y]);\n        gameboard.grid[x][y].ship = ship;\n        gameboard.grid[x][y].occupied = true;\n      }\n      return ship;\n    },\n    receiveAttack(gameboardX: number, gameboardY: number): void {\n      if (gameboard.grid[gameboardX][gameboardY].occupied) {\n        gameboard.grid[gameboardX][gameboardY].hit = true;\n        gameboard.grid[gameboardX][gameboardY].ship?.hit();\n      } else {\n        gameboard.missedAttacks.push([gameboardX, gameboardY]);\n      }\n    },\n    missedAttacks: [],\n    allShipsSunk() {\n      for (let i = 0; i < this.grid.length; i++) {\n        for (let j = 0; j < this.grid.length; j++) {\n          if (this.grid[i][j].occupied) {\n            this.grid[i][j].ship?.isSunk();\n            if (!this.grid[i][j].ship?.sunk) {\n              return false;\n            } else {\n              continue;\n            }\n          }\n        }\n      }\n      return true;\n    },\n    getMissedShots: function () {\n      return this.missedAttacks;\n    },\n    getHitCells: function () {\n      const hitCells: number[][] = [];\n      for (let i = 0; i < this.size; i++) {\n        for (let j = 0; j < this.size; j++) {\n          if (this.grid[i][j].hit) {\n            hitCells.push([i, j]);\n          }\n        }\n      }\n      return hitCells;\n    },\n  };\n  return gameboard;\n}\n","import { createGameboard, Gameboard } from \"../src/gameboard\";\n\nexport interface Player {\n  isHuman: boolean;\n  gameboard: Gameboard;\n  name: \"Player 1\" | \"Player 2\";\n  isMyTurn: boolean;\n  makeHumanMove: (x: number, y: number, opponent: Player) => void;\n  makeComputerMove: (opponent: Player) => void;\n  toggleTurn: () => void;\n}\n\nexport function createPlayer(isHuman: boolean): Player {\n  return {\n    isHuman: isHuman,\n    gameboard: createGameboard(10),\n    name: isHuman ? \"Player 1\" : \"Player 2\",\n    isMyTurn: isHuman,\n    makeHumanMove: function (x: number = 0, y: number = 0, opponent: Player) {\n      console.log(x);\n      console.log(y);\n      opponent.gameboard.receiveAttack(x, y);\n    },\n\n    makeComputerMove: function (opponent: Player) {\n      if (!this.isHuman) {\n        let validMove = false;\n        let x: number = 0;\n        let y: number = 0;\n        while (!validMove) {\n          x = Math.floor(Math.random() * opponent.gameboard.size);\n          y = Math.floor(Math.random() * opponent.gameboard.size);\n\n          const missedShots = opponent.gameboard.getMissedShots();\n          const hitCells = opponent.gameboard.getHitCells();\n          if (\n            !missedShots.some((shot) => shot[0] === x && shot[1] == y) &&\n            !hitCells.some((cell) => cell[0] === x && cell[1] === y)\n          ) {\n            validMove = true;\n          }\n        }\n        opponent.gameboard.receiveAttack(x, y);\n      }\n      console.log(\"Computer made a move\");\n    },\n    toggleTurn: function () {\n      this.isMyTurn = !this.isMyTurn;\n    },\n  };\n}\n","import { createGameboard } from \"../src/gameboard\";\nimport { createPlayer, Player } from \"../src/player\";\n\nexport interface Gameloop {\n  startGame: () => void;\n  humanPlayer: Player;\n  compPlayer: Player;\n  manageTurns: (x?: number, y?: number) => void;\n  checkEndOfGame: () => void;\n  gameOver: boolean;\n}\n\nexport function createGameLoop(): Gameloop {\n  let gameLoop: Gameloop = {\n    humanPlayer: createPlayer(true),\n    compPlayer: createPlayer(false),\n    startGame: function () {\n      this.humanPlayer.gameboard = createGameboard(10);\n      this.humanPlayer.gameboard.createShips(0, 0, 1, \"horizontal\");\n      this.humanPlayer.gameboard.createShips(0, 1, 1, \"horizontal\");\n      this.humanPlayer.gameboard.createShips(0, 2, 1, \"horizontal\");\n\n      this.compPlayer.gameboard = createGameboard(10);\n      this.compPlayer.gameboard.createShips(0, 0, 1, \"horizontal\");\n      this.compPlayer.gameboard.createShips(0, 1, 1, \"horizontal\");\n      this.compPlayer.gameboard.createShips(0, 2, 1, \"horizontal\");\n      this.manageTurns();\n    },\n    manageTurns: function (x?: number, y?: number) {\n      if (this.gameOver) {\n        return;\n      }\n      if (this.humanPlayer.isMyTurn) {\n        console.log(\"Human players Turn\");\n        if (x !== undefined && y !== undefined) {\n          this.humanPlayer.makeHumanMove(x, y, this.compPlayer);\n          this.checkEndOfGame();\n          if (!this.gameOver) {\n            this.humanPlayer.toggleTurn();\n            this.compPlayer.toggleTurn();\n            setTimeout(() => this.manageTurns(), 200);\n          }\n        }\n      } else {\n        console.log(\"Computers players turn\");\n        this.compPlayer.makeComputerMove(this.humanPlayer);\n        this.checkEndOfGame();\n        if (!this.gameOver) {\n          this.humanPlayer.toggleTurn();\n          this.compPlayer.toggleTurn();\n        }\n      }\n    },\n    checkEndOfGame: function () {\n      if (this.compPlayer.gameboard.allShipsSunk()) {\n        console.log(\"Congratulations! You have won!\");\n        this.gameOver = true;\n      } else if (this.humanPlayer.gameboard.allShipsSunk()) {\n        console.log(\"Game Over, you lost...\");\n        this.gameOver = true;\n      }\n    },\n    gameOver: false,\n  };\n  return gameLoop;\n}\n","import { createGameLoop } from \"../src/gameLoop\";\nimport { Gameboard } from \"./gameboard\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const startGameBtn = document.querySelector(\"#startBtn\");\n  const opponentBoard = document.querySelector(\".opponentBoard\");\n  const playersBoard = document.querySelector(\".playersBoard\");\n\n  const gameLoop = createGameLoop();\n\n  if (opponentBoard instanceof HTMLElement) {\n    createGrid(gameLoop.humanPlayer.gameboard, opponentBoard);\n  } else {\n    console.error(\"Opponent board not found\");\n  }\n  if (playersBoard instanceof HTMLElement) {\n    createGrid(gameLoop.humanPlayer.gameboard, playersBoard);\n  } else {\n    console.error(\"Players board not found\");\n  }\n\n  if (startGameBtn) {\n    startGameBtn.addEventListener(\"click\", () => {\n      gameLoop.startGame();\n    });\n  } else {\n    console.error(\"Start Game button not found\");\n  }\n\n  document.querySelectorAll(\".cell\").forEach((cell) => {\n    cell.addEventListener(\"click\", (event) => {\n      const target = event.target as HTMLElement;\n      if (target.dataset.x && target.dataset.y) {\n        const x = parseInt(target.dataset.x, 10);\n        const y = parseInt(target.dataset.y, 10);\n        gameLoop.manageTurns(x, y);\n        updateMoveLists();\n      } else {\n        console.error(\"Data attributes x and y are not set\");\n      }\n    });\n  });\n\n  function createGrid(gameboard: Gameboard, htmlGrid: HTMLElement) {\n    htmlGrid.innerHTML = \"\";\n    htmlGrid.style.gridTemplateColumns = `repeat(${gameboard.size}, 1fr)`;\n    htmlGrid.style.gridTemplateRows = `repeat(${gameboard.size}, 1fr)`;\n    const root = document.documentElement;\n    root.style.setProperty(\"--num\", gameboard.size.toString());\n    for (let i = 0; i < gameboard.size; i++) {\n      for (let j = 0; j < gameboard.size; j++) {\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"cell\");\n        cell.dataset.x = i.toString();\n        cell.dataset.y = j.toString();\n        htmlGrid.appendChild(cell);\n      }\n    }\n  }\n\n  function updateMoveLists() {\n    const humanMissedAttacksElement =\n      document.getElementById(\"humanMissedAttacks\");\n    const computerMissedAttacksElement = document.getElementById(\n      \"computerMissedAttacks\"\n    );\n    const humanHitCellsElement = document.getElementById(\"humanHitCells\");\n    const computerHitCellsElement = document.getElementById(\"computerHitCells\");\n\n    if (humanMissedAttacksElement) {\n      humanMissedAttacksElement.textContent =\n        gameLoop.humanPlayer.gameboard.missedAttacks\n          .map((move) => `(${move[0]}, ${move[1]})`)\n          .join(\", \");\n    }\n    if (computerMissedAttacksElement) {\n      computerMissedAttacksElement.textContent =\n        gameLoop.compPlayer.gameboard.missedAttacks\n          .map((move) => `(${move[0]}, ${move[1]})`)\n          .join(\", \");\n    }\n\n    if (humanHitCellsElement) {\n      humanHitCellsElement.textContent = gameLoop.humanPlayer.gameboard\n        .getHitCells()\n        .map((move) => `(${move[0]}, ${move[1]})`)\n        .join(\", \");\n    }\n    if (computerHitCellsElement) {\n      computerHitCellsElement.textContent = gameLoop.compPlayer.gameboard\n        .getHitCells()\n        .map((move) => `(${move[0]}, ${move[1]})`)\n        .join(\", \");\n    }\n  }\n});\n"]}